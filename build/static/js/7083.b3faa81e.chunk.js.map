{"version":3,"file":"static/js/7083.b3faa81e.chunk.js","mappings":"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","sources":["views/admin/role/changeAccess.js","views/admin/role/components/roleUser.js","views/admin/role/components/userModal.js","views/admin/role/components/roleModal.js","views/admin/role/Add.js","views/admin/role/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  Checkbox,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { useFormik } from \"formik\";\r\nimport { putApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction ChangeAccess(props) {\r\n  const {\r\n    columnsData,\r\n    name,\r\n    tableData,\r\n    fetchData,\r\n    setAccess,\r\n    _id,\r\n    setRoleModal,\r\n    editModal, setEditModal,\r\n  } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n\r\n  const [gopageValue, setGopageValue] = useState();\r\n  const data = useMemo(() => tableData || [], [tableData]);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 },\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    pageOptions,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length);\r\n  }\r\n\r\n  const initialValues = {\r\n    roleName: name,\r\n    access: tableData,\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: initialValues,\r\n    enableReinitialize: true,\r\n    onSubmit: (values, { resetForm }) => {\r\n      EditData();\r\n    },\r\n  });\r\n\r\n  const {\r\n    values,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    resetForm\r\n  } = formik;\r\n\r\n  // const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {\r\n  //   const { checked } = event.target;\r\n\r\n  //   let updatedAccess = values.access.map((item, idx) => {\r\n  //     if (idx === index) {\r\n  //       const updatedItem = { ...item, [fieldName]: checked };\r\n  //       if (secondFieldName && checked === false) {\r\n  //         updatedItem[secondFieldName] = checked;\r\n  //         updatedItem.update = checked;\r\n  //         updatedItem.delete = checked;\r\n  //       } else if (secondFieldName) {\r\n  //         updatedItem[secondFieldName] = checked;\r\n  //       }\r\n\r\n  //       return updatedItem;\r\n  //     }\r\n  //     return item;\r\n  //   });\r\n  //   const leadsIndex = values.access.findIndex(accessItem => accessItem.title === \"Leads\");\r\n  //   const contactsIndex = values.access.findIndex(accessItem => accessItem.title === \"Contacts\");\r\n\r\n  //   const lc = ((updatedAccess[index]?.title === \"Leads\" || updatedAccess[index]?.title === \"Contacts\") && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view))\r\n\r\n  //   const mm = updatedAccess?.map((i, idx) => {\r\n  //     let newItem = { ...i };\r\n  //     if (secondFieldName && checked === false && lc) {\r\n  //       if (i.title === \"Emails\" || i.title === \"Calls\" || i.title === \"Meetings\") {\r\n  //         newItem.create = false;\r\n  //         newItem.delete = false;\r\n  //         newItem.update = false;\r\n  //         newItem.view = false;\r\n  //       }\r\n  //     }\r\n  //     return newItem;\r\n  //   })\r\n\r\n  //   // setFieldValue('access', updatedAccess);\r\n  //   setFieldValue('access', mm);\r\n  // };\r\n\r\n  const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {\r\n    const { checked } = event.target;\r\n    const leadsIndex = values.access.findIndex(accessItem => accessItem.title === \"Leads\");\r\n    const contactsIndex = values.access.findIndex(accessItem => accessItem.title === \"Contacts\");\r\n\r\n    const updatedAccess = values.access.map((item, idx) => {\r\n      if (idx === index) {\r\n        const updatedItem = { ...item, [fieldName]: checked };\r\n        if (secondFieldName && !checked) {\r\n          updatedItem[secondFieldName] = updatedItem.update = updatedItem.delete = checked;\r\n        } else if (secondFieldName) {\r\n          updatedItem[secondFieldName] = checked;\r\n        }\r\n        return updatedItem;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    const finalUpdatedAccessWith = updatedAccess.map((item, idx) => {\r\n      if (secondFieldName && checked === false && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view)) {\r\n        if ([\"Emails\", \"Calls\", \"Meetings\"].includes(item.title)) {\r\n          return {\r\n            ...item,\r\n            create: false,\r\n            delete: false,\r\n            update: false,\r\n            view: false\r\n          };\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setFieldValue('access', finalUpdatedAccessWith);\r\n  };\r\n\r\n  const EditData = async () => {\r\n    try {\r\n      setIsLoding(true);\r\n      setAccess(values?.access)\r\n      let response = await putApi(`api/role-access/edit/${_id}`, values);\r\n      if (response.status === 200) {\r\n        setEditModal(false)\r\n        fetchData()\r\n        setRoleModal(true)\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setIsLoding(false);\r\n    }\r\n  };\r\n\r\n  const disable = (cell) => {\r\n    if ([\"Emails\", \"Calls\", \"Meetings\"].includes(cell.title)) {\r\n      return !values?.access?.some((i => (i.title === \"Contacts\" || i.title === \"Leads\") && i.view));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [editModal])\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(data) && data?.length > 0) {\r\n      setPageSize(data?.length); // Ensure the pageSize is set to the length of the data\r\n    }\r\n  }, [data, setPageSize]);\r\n\r\n  return (\r\n    <Modal onClose={() => setEditModal(false)} isOpen={editModal} isCentered size={\"xl\"}>\r\n      <ModalOverlay />\r\n      <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\r\n        <ModalHeader textTransform={\"capitalize\"}>{name} Access</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n          <Table>\r\n            <Thead>\r\n              {headerGroups?.map((headerGroup, index) => (\r\n                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                  {headerGroup.headers?.map((column, index) => (\r\n                    <Th\r\n                      sx={{ width: \"10px\" }}\r\n                      pe=\"10px\"\r\n                      key={index}\r\n                      borderColor={borderColor}\r\n                      display={column.display === false && \"none\"}\r\n                    >\r\n                      <Flex\r\n                        justify=\"space-between\"\r\n                        align=\"center\"\r\n                        fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                        color=\"gray.400\"\r\n                      >\r\n                        {column.display !== false && column.render(\"Header\")}\r\n                      </Flex>\r\n                    </Th>\r\n                  ))}\r\n                </Tr>\r\n              ))}\r\n            </Thead>\r\n            <Tbody {...getTableBodyProps()}>\r\n              {isLoding ? (\r\n                <Tr>\r\n                  <Td colSpan={columns?.length}>\r\n                    <Flex\r\n                      justifyContent={\"center\"}\r\n                      alignItems={\"center\"}\r\n                      width=\"100%\"\r\n                      color={textColor}\r\n                      fontSize=\"sm\"\r\n                      fontWeight=\"700\"\r\n                    >\r\n                      <Spinner />\r\n                    </Flex>\r\n                  </Td>\r\n                </Tr>\r\n              ) : data?.length === 0 ? (\r\n                <Tr>\r\n                  <Td colSpan={columns.length}>\r\n                    <Text\r\n                      textAlign={\"center\"}\r\n                      width=\"100%\"\r\n                      color={textColor}\r\n                      fontSize=\"sm\"\r\n                      fontWeight=\"700\"\r\n                    >\r\n                      <DataNotFound />\r\n                    </Text>\r\n                  </Td>\r\n                </Tr>\r\n              ) : (\r\n                page?.map((row, i) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <Tr {...row?.getRowProps()} key={i}>\r\n                      {row?.cells?.map((cell, index) => {\r\n                        let data = \"\";\r\n                        if (cell?.column.Header === \"title\") {\r\n                          data = (\r\n                            <Text\r\n                              me=\"10px\"\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              {cell?.value}\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"create\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                disabled={disable(cell?.row?.original)}\r\n                                isChecked={values?.access[i]?.create}\r\n                                defaultChecked={values?.access[i]?.create}\r\n                                onChange={handleCheckboxChange(i, 'create', \"view\")}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"view\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                disabled={disable(cell?.row?.original)}\r\n                                isChecked={values?.access[i]?.view}\r\n                                defaultChecked={values?.access[i]?.view}\r\n                                onChange={handleCheckboxChange(i, 'view', \"create\")}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"update\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                disabled={!values?.access[i]?.view}\r\n                                isChecked={values?.access[i]?.update}\r\n                                defaultChecked={values?.access[i]?.update}\r\n                                onChange={handleCheckboxChange(i, 'update')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        } else if (cell?.column.Header === \"delete\") {\r\n                          data = (\r\n                            <Text\r\n                              color={textColor}\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              <Checkbox\r\n                                disabled={!values?.access[i]?.view}\r\n                                isChecked={values?.access[i]?.delete}\r\n                                defaultChecked={values?.access[i]?.delete}\r\n                                onChange={handleCheckboxChange(i, 'delete')}\r\n                              />\r\n                            </Text>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <Td\r\n                            {...cell?.getCellProps()}\r\n                            key={index}\r\n                            fontSize={{ sm: \"14px\" }}\r\n                            minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                            borderColor=\"transparent\"\r\n                            sx={{\r\n                              display: cell?.column.Header === \"#\" && \"none\",\r\n                            }}\r\n                          >\r\n                            {data}\r\n                          </Td>\r\n                        );\r\n                      })}\r\n                    </Tr>\r\n                  );\r\n                })\r\n              )}\r\n            </Tbody>\r\n          </Table>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button size=\"sm\" variant=\"brand\" onClick={handleSubmit}>\r\n            Save\r\n          </Button>\r\n          <Button size=\"sm\"\r\n            onClick={() => { resetForm(); setEditModal(false); setRoleModal(true); }}\r\n            variant=\"outline\"\r\n            colorScheme=\"red\"\r\n            sx={{\r\n              marginLeft: 2,\r\n              textTransform: \"capitalize\",\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ChangeAccess;\r\n","import { Button, Flex, Modal, ModalBody, Text, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useColorModeValue, Tr, Td, Spinner, Thead, Table, Tbody, Th, Checkbox } from '@chakra-ui/react';\r\nimport DataNotFound from 'components/notFoundData';\r\nimport Pagination from 'components/pagination/Pagination';\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';\r\nimport { putApi } from 'services/api';\r\n\r\nconst RoleUser = (props) => {\r\n\r\n    const { setUserModal, userModal, tableData, columnsData, setOpenUser, _id, userRole, fetchData } = props;\r\n\r\n    const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n    const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n    const columns = useMemo(() => columnsData, [columnsData]);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const data = useMemo(() => tableData, [tableData]);\r\n    const [gopageValue, setGopageValue] = useState();\r\n\r\n    const tableInstance = useTable(\r\n        {\r\n            columns, data,\r\n            initialState: { pageIndex: 0 }\r\n        },\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        usePagination\r\n    );\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize }\r\n    } = tableInstance;\r\n\r\n    if (pageOptions.length < gopageValue) {\r\n        setGopageValue(pageOptions.length)\r\n    }\r\n\r\n    const uniqueValues = [...new Set(selectedValues)];\r\n\r\n\r\n    const handleCheckboxChange = (event, value) => {\r\n        if (event.target.checked) {\r\n            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n        } else {\r\n            setSelectedValues((prevSelectedValues) =>\r\n                prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const pre = userRole?.map((item) => item._id)\r\n        setSelectedValues(pre)\r\n    }, [userModal])\r\n\r\n\r\n    const addUser = async () => {\r\n        const response = await putApi(`api/role-access/assignedUsers/${_id}`, uniqueValues)\r\n        if (response.status === 200) {\r\n            setUserModal(false)\r\n            fetchData()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal onClose={() => setUserModal(false)} isOpen={userModal} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>\r\n                    <Flex justifyContent={'space-between'}>\r\n                        <Text>Users</Text>\r\n                        <ModalCloseButton mt='2' />\r\n                    </Flex>\r\n                </ModalHeader>\r\n                <ModalBody overflowY={\"auto\"} height={\"400px\"}>\r\n                    <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n                        <Thead>\r\n                            {headerGroups?.map((headerGroup, index) => (\r\n                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                                    {headerGroup.headers?.map((column, index) => (\r\n                                        <Th\r\n                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                                            pe=\"10px\"\r\n                                            key={index}\r\n                                            borderColor={borderColor}\r\n                                        >\r\n\r\n                                            <Flex\r\n                                                align=\"center\"\r\n                                                justifyContent={column.center ? \"center\" : \"start\"}\r\n                                                fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                                                color=\" secondaryGray.900\"\r\n                                            >\r\n                                                <span style={{\r\n                                                    textTransform: \"capitalize\",\r\n                                                    //  marginRight: \"8px\"\r\n                                                }}>\r\n                                                    {column.render(\"Header\")}\r\n                                                </span>\r\n                                                {column.isSortable !== false && (\r\n                                                    <span>\r\n                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                                                    </span>\r\n                                                )}\r\n                                            </Flex>\r\n                                        </Th>\r\n                                    ))}\r\n                                </Tr>\r\n                            ))}\r\n                        </Thead>\r\n                        <Tbody {...getTableBodyProps()}>\r\n                            {isLoding ?\r\n                                <Tr>\r\n                                    <Td colSpan={columns?.length}>\r\n                                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                            <Spinner />\r\n                                        </Flex>\r\n                                    </Td>\r\n                                </Tr>\r\n                                : data?.length === 0 ? (\r\n                                    <Tr>\r\n                                        <Td colSpan={columns.length}>\r\n                                            <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                <DataNotFound />\r\n                                            </Text>\r\n                                        </Td>\r\n                                    </Tr>\r\n                                ) : page?.map((row, i) => {\r\n                                    prepareRow(row);\r\n                                    return (\r\n                                        <Tr {...row?.getRowProps()} key={i}>\r\n                                            {row?.cells?.map((cell, index) => {\r\n                                                let data = \"\";\r\n                                                if (cell?.column.Header === \"#\") {\r\n                                                    data = (\r\n                                                        <Flex align=\"center\" >\r\n                                                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                                                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                                {cell?.row?.index + 1}\r\n                                                            </Text>\r\n                                                        </Flex>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"email Id\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"first Name\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value ? cell?.value : ' - '}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"last Name\") {\r\n                                                    data = (\r\n                                                        <Text\r\n                                                            me=\"10px\"\r\n                                                            color={textColor}\r\n                                                            fontSize=\"sm\"\r\n                                                            fontWeight=\"700\"\r\n                                                        >\r\n                                                            {cell?.value ? cell?.value : ' - '}\r\n                                                        </Text>\r\n                                                    );\r\n                                                } else if (cell?.column.Header === \"role\") {\r\n                                                    data = (\r\n                                                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                            {cell?.value}\r\n                                                        </Text>\r\n                                                    );\r\n                                                }\r\n                                                return (\r\n                                                    <Td\r\n                                                        {...cell?.getCellProps()}\r\n                                                        key={index}\r\n                                                        fontSize={{ sm: \"14px\" }}\r\n                                                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                                                        borderColor=\"transparent\"\r\n                                                    >\r\n                                                        {data}\r\n                                                    </Td>\r\n                                                );\r\n                                            })}\r\n                                        </Tr>\r\n                                    );\r\n                                })}\r\n                        </Tbody>\r\n                    </Table>\r\n                    {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant=\"brand\" size=\"sm\" onClick={() => { addUser(); setOpenUser(true) }}>\r\n                        Save\r\n                    </Button>\r\n                    <Button size=\"sm\"\r\n                        onClick={() => { setUserModal(false); setSelectedValues([]); setOpenUser(true) }}\r\n                        variant=\"outline\"\r\n                        colorScheme=\"red\"\r\n                        sx={{\r\n                            marginLeft: 2,\r\n                            textTransform: \"capitalize\",\r\n                        }}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default RoleUser","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport RoleUser from \"./roleUser\";\r\nimport { getApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction UserModal(props) {\r\n  const {\r\n    tableData,\r\n    columnsData,\r\n    isOpen,\r\n    _id,\r\n    setRoleModal,\r\n    setOpenUser,\r\n    fetchData,\r\n  } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const [userModal, setUserModal] = useState(false);\r\n  const [userData, setUserData] = useState([]);\r\n  const [gopageValue, setGopageValue] = useState();\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  const userFetchData = async () => {\r\n    let result = await getApi('api/user/?role=user');\r\n    setUserData(result?.data?.user);\r\n  }\r\n\r\n  useEffect(() => {\r\n    userFetchData()\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Modal onClose={() => setOpenUser(false)} isOpen={isOpen} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader height={\"580px\"} >\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text>Users</Text>\r\n              <Button variant=\"brand\" size=\"sm\" me={'2rem'} onClick={() => { setOpenUser(false); setUserModal(true) }}>Manage Users</Button>\r\n              <ModalCloseButton mt='2' />\r\n            </Flex>\r\n          </ModalHeader>\r\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n            <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n              <Thead>\r\n                {headerGroups?.map((headerGroup, index) => (\r\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                    {headerGroup.headers?.map((column, index) => (\r\n                      <Th\r\n                        {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                        pe=\"10px\"\r\n                        key={index}\r\n                        borderColor={borderColor}\r\n                      >\r\n\r\n                        <Flex\r\n                          align=\"center\"\r\n                          justifyContent={column.center ? \"center\" : \"start\"}\r\n                          fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                          color=\" secondaryGray.900\"\r\n                        >\r\n                          <span style={{\r\n                            textTransform: \"capitalize\",\r\n                          }}>\r\n                            {column.render(\"Header\")}\r\n                          </span>\r\n                          {column.isSortable !== false && (\r\n                            <span>\r\n                              {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                            </span>\r\n                          )}\r\n                        </Flex>\r\n                      </Th>\r\n                    ))}\r\n                  </Tr>\r\n                ))}\r\n              </Thead>\r\n              <Tbody {...getTableBodyProps()}>\r\n                {isLoding ?\r\n                  <Tr>\r\n                    <Td colSpan={columns?.length}>\r\n                      <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                        <Spinner />\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                  : data?.length === 0 ? (\r\n                    <Tr>\r\n                      <Td colSpan={columns.length}>\r\n                        <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          <DataNotFound />\r\n                        </Text>\r\n                      </Td>\r\n                    </Tr>\r\n                  ) : page?.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <Tr {...row?.getRowProps()} key={i}>\r\n                        {row?.cells?.map((cell, index) => {\r\n                          let data = \"\";\r\n                          if (cell?.column.Header === \"#\") {\r\n                            data = (\r\n                              <Flex align=\"center\" >\r\n                                <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                  {cell?.row?.index + 1}\r\n                                </Text>\r\n                              </Flex>\r\n                            );\r\n                          } else if (cell?.column.Header === \"email Id\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"first Name\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? cell?.value : ' - '}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"last Name\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? cell?.value : ' - '}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"role\") {\r\n                            data = (\r\n                              <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Td\r\n                              {...cell?.getCellProps()}\r\n                              key={index}\r\n                              fontSize={{ sm: \"14px\" }}\r\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                              borderColor=\"transparent\"\r\n                            >\r\n                              {data}\r\n                            </Td>\r\n                          );\r\n                        })}\r\n                      </Tr>\r\n                    );\r\n                  })}\r\n              </Tbody>\r\n            </Table>\r\n            {data?.length > 5 && (\r\n              <Pagination\r\n                gotoPage={gotoPage}\r\n                gopageValue={gopageValue}\r\n                setGopageValue={setGopageValue}\r\n                pageCount={pageCount}\r\n                canPreviousPage={canPreviousPage}\r\n                previousPage={previousPage}\r\n                canNextPage={canNextPage}\r\n                pageOptions={pageOptions}\r\n                setPageSize={setPageSize}\r\n                nextPage={nextPage}\r\n                pageSize={pageSize}\r\n                pageIndex={pageIndex}\r\n              />\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setOpenUser(false);\r\n                setRoleModal(true);\r\n              }}\r\n              variant=\"outline\"\r\n              colorScheme=\"red\"\r\n              sx={{\r\n                marginLeft: 2,\r\n                textTransform: \"capitalize\",\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <RoleUser\r\n        fetchData={fetchData}\r\n        userModal={userModal}\r\n        setOpenUser={setOpenUser}\r\n        _id={_id}\r\n        setUserModal={setUserModal}\r\n        userFetchData={userFetchData}\r\n        userRole={tableData}\r\n        tableData={userData || []}\r\n        columnsData={columnsData || []}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserModal;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Flex,\r\n  Text,\r\n  Td,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport ChangeAccess from \"../changeAccess\";\r\nimport UserModal from \"./userModal\";\r\nimport { getApi } from \"services/api\";\r\nimport DataNotFound from \"components/notFoundData\";\r\n\r\nfunction RoleModal(props) {\r\n  const {\r\n    name,\r\n    tableData,\r\n    fetchData,\r\n    columnsData,\r\n    isOpen,\r\n    setAction,\r\n    setAccess,\r\n    _id,\r\n    onOpen,\r\n    setRoleModal,\r\n  } = props;\r\n\r\n  const tableColumns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10\r\n    },\r\n    { Header: 'email Id', accessor: 'username' },\r\n    { Header: \"first Name\", accessor: \"firstName\", },\r\n    { Header: \"last Name\", accessor: \"lastName\", },\r\n    { Header: \"role\", accessor: \"role\", },\r\n  ];\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [openUser, setOpenUser] = useState();\r\n  const [gopageValue, setGopageValue] = useState();\r\n  const data = useMemo(() => tableData || [], [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const [userdata, setUserData] = useState([]);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize: 500 },\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    pageOptions,\r\n    state: { pageIndex, pageSize },\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length);\r\n  }\r\n\r\n  const userFetchData = async () => {\r\n    if (_id) {\r\n      let result = await getApi('api/role-access/assignedUsers/', _id);\r\n      setUserData(result?.data);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    userFetchData()\r\n  }, [_id])\r\n\r\n  return (\r\n    <>\r\n      <Modal onClose={() => setRoleModal(false)} isOpen={isOpen} isCentered size={\"xl\"}>\r\n        <ModalOverlay />\r\n        <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\r\n          <ModalHeader>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text textTransform={\"capitalize\"}>{name} Access</Text>\r\n              <Text style={{\r\n                marginRight: \"25px\",\r\n                fontSize: \"15px\",\r\n                fontWeight: \"700\",\r\n                marginTop: '5px',\r\n                color: 'blue',\r\n                cursor: 'pointer',\r\n                textDecoration: 'underline'\r\n              }} onClick={() => { setOpenUser(true); setRoleModal(false); }}>View user's in {name} role</Text>\r\n              <ModalCloseButton mt='2' />\r\n            </Flex>\r\n          </ModalHeader>\r\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\r\n            <Table>\r\n              <Thead>\r\n                {headerGroups?.map((headerGroup, index) => (\r\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                    {headerGroup.headers?.map((column, index) => (\r\n                      <Th\r\n                        sx={{ width: \"10px\" }}\r\n                        key={index}\r\n                        borderColor={borderColor}\r\n                        display={column.display === false && \"none\"}\r\n                      >\r\n                        {column.display !== false && column.render(\"Header\")}\r\n                      </Th>\r\n                    ))}\r\n                  </Tr>\r\n                ))}\r\n              </Thead>\r\n              <Tbody {...getTableBodyProps()}>\r\n                {isLoding ? (\r\n                  <Tr>\r\n                    <Td colSpan={columns?.length}>\r\n                      <Flex\r\n                        justifyContent={\"center\"}\r\n                        alignItems={\"center\"}\r\n                        width=\"100%\"\r\n                        color={textColor}\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                      >\r\n                        <Spinner />\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                ) : data?.length === 0 ? (\r\n                  <Tr>\r\n                    <Td colSpan={columns.length}>\r\n                      <Text\r\n                        textAlign={\"center\"}\r\n                        width=\"100%\"\r\n                        color={textColor}\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                      >\r\n                        <DataNotFound />\r\n                      </Text>\r\n                    </Td>\r\n                  </Tr>\r\n                ) : (\r\n                  page?.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                      <Tr {...row?.getRowProps()} key={i}>\r\n                        {row?.cells?.map((cell, index) => {\r\n                          let data = \"\";\r\n                          if (cell?.column.Header === \"title\") {\r\n                            data = (\r\n                              <Text\r\n                                me=\"10px\"\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"create\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"view\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"update\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          } else if (cell?.column.Header === \"delete\") {\r\n                            data = (\r\n                              <Text\r\n                                color={textColor}\r\n                                fontSize=\"sm\"\r\n                                fontWeight=\"700\"\r\n                              >\r\n                                {cell?.value ? 'Yes' : 'No'}\r\n                              </Text>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Td\r\n                              {...cell?.getCellProps()}\r\n                              key={index}\r\n                              fontSize={{ sm: \"14px\" }}\r\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                              borderColor=\"transparent\"\r\n                              sx={{\r\n                                display: cell?.column.Header === \"#\" && \"none\",\r\n                              }}\r\n                            >\r\n                              {data}\r\n                            </Td>\r\n                          );\r\n                        })}\r\n                      </Tr>\r\n                    );\r\n                  })\r\n                )}\r\n              </Tbody>\r\n            </Table>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button variant=\"brand\" size=\"sm\" onClick={() => { setEditModal(true); setRoleModal(false) }}>\r\n              Change Access\r\n            </Button>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => setRoleModal(false)}\r\n              variant=\"outline\"\r\n              colorScheme=\"red\"\r\n              sx={{\r\n                marginLeft: 2,\r\n                textTransform: \"capitalize\",\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <ChangeAccess tableData={tableData ?? []} accessRole={tableData ?? []} setAccess={setAccess} setRoleModal={setRoleModal} columnsData={columnsData ?? []} _id={_id} fetchData={fetchData} name={name} setEditModal={setEditModal} setAction={setAction} editModal={editModal} />\r\n      <UserModal isOpen={openUser}\r\n        setRoleModal={setRoleModal}\r\n        setOpenUser={setOpenUser}\r\n        onOpen={onOpen}\r\n        columnsData={tableColumns ?? []}\r\n        tableData={userdata ?? []}\r\n        setAction={setAction}\r\n        _id={_id}\r\n        fetchData={userFetchData}\r\n        userdata={userdata}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RoleModal;\r\n","import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { postApi } from 'services/api';\r\nimport * as yup from 'yup'\r\n\r\nconst AddRole = (props) => {\r\n    const { onClose, isOpen, setAction } = props;\r\n    const [isLoding, setIsLoding] = useState(false);\r\n\r\n    const initialValues = {\r\n        roleName: '',\r\n        description: '',\r\n    };\r\n\r\n    const validationSchema = yup.object({\r\n        roleName: yup.string().required(\"Role Name is required\"),\r\n        description: yup.string().required(\"Description is required\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/role-access/add', values)\r\n            if (response && response.status === 200) {\r\n                onClose(false);\r\n                setAction((pre) => !pre)\r\n            } else {\r\n                toast.error(response.response.data?.message)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    Add Role\r\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Role Name<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.roleName}\r\n                                name=\"roleName\"\r\n                                placeholder='Enter Role Name'\r\n                                fontWeight='500'\r\n                                borderColor={errors.roleName && touched.roleName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.roleName && touched.roleName && errors.roleName}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Description<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.description}\r\n                                name=\"description\"\r\n                                placeholder='Enter Description'\r\n                                fontWeight='500'\r\n                                borderColor={errors.description && touched.description ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.description && touched.description && errors.description}</Text>\r\n                        </GridItem>\r\n                    </Grid>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' mr={1} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button size=\"sm\" variant='outline' color={'red'} colorScheme='red' onClick={() => {\r\n                        formik.resetForm()\r\n                        onClose(false)\r\n                    }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddRole\r\n","import { Button, Text, useDisclosure } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getApi } from \"services/api\";\r\nimport CommonCheckTable from \"components/reactTable/checktable\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport RoleModal from \"./components/roleModal\";\r\nimport AddRole from \"./Add\";\r\n\r\nconst Index = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [roleModal, setRoleModal] = useState(false);\r\n  const [access, setAccess] = useState([])\r\n  const [roleId, setRoleId] = useState('')\r\n  const [searchboxOutside, setSearchboxOutside] = useState('');\r\n  const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\r\n  const [displaySearchData, setDisplaySearchData] = useState(false);\r\n  const [roleName, setRoleName] = useState('')\r\n  const [searchedData, setSearchedData] = useState([]);\r\n\r\n  const columns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10,\r\n      display: false\r\n    },\r\n    {\r\n      Header: \"Role Name\", accessor: \"roleName\", cell: (cell) => (\r\n        <Text\r\n          me=\"10px\"\r\n          onClick={() => { setRoleModal(true); setRoleName(cell?.value); setRoleId(cell?.row?.original?._id); setAccess(cell?.row?.original?.access); }}\r\n          color='brand.600'\r\n          sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline', cursor: 'pointer' } }}\r\n          fontSize=\"sm\"\r\n          fontWeight=\"700\"\r\n        >\r\n          {cell?.value}\r\n        </Text>\r\n      )\r\n    },\r\n    { Header: \"Description\", accessor: \"description\" }\r\n  ];\r\n  const rowColumns = [\r\n    {\r\n      Header: \"#\",\r\n      accessor: \"_id\",\r\n      isSortable: false,\r\n      width: 10,\r\n      display: false\r\n    },\r\n\r\n    { Header: \"title\", accessor: \"title\" },\r\n    { Header: \"create\", accessor: \"create\", width: '20px' },\r\n    { Header: \"view\", accessor: \"view\", width: '20px' },\r\n    { Header: \"update\", accessor: \"update\", width: '20px' },\r\n    { Header: \"delete\", accessor: \"delete\", width: '20px' },\r\n  ]\r\n  const [action, setAction] = useState(false);\r\n  const [isLoding, setIsLoding] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const size = \"lg\";\r\n  const navigate = useNavigate()\r\n\r\n  const fetchData = async () => {\r\n    setIsLoding(true);\r\n    let result = await getApi(\"api/role-access\");\r\n    setData(result.data);\r\n    setIsLoding(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [action])\r\n\r\n  return (\r\n    <div>\r\n      <CommonCheckTable\r\n        title={'Roles'}\r\n        isLoding={isLoding}\r\n        columnData={columns ?? []}\r\n        // dataColumn={columns ?? []}\r\n        allData={data || []}\r\n        tableData={data}\r\n        // AdvanceSearch={() => \"\"}\r\n        AdvanceSearch={false}\r\n        tableCustomFields={[]}\r\n        searchedDataOut={searchedData}\r\n        searchDisplay={displaySearchData}\r\n        setSearchDisplay={setDisplaySearchData}\r\n        setSearchedDataOut={setSearchedData}\r\n        searchboxOutside={searchboxOutside}\r\n        // setSearchboxOutside={setSearchboxOutside}\r\n        BackButton={<Button onClick={() => navigate('/admin-setting')} variant=\"brand\" size=\"sm\" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>}\r\n        deleteMany={true}\r\n        access={true}\r\n        checkBox={false}\r\n        getTagValuesOutSide={getTagValuesOutSide}\r\n        setGetTagValuesOutside={setGetTagValuesOutside}\r\n        ManageGrid={false}\r\n        onOpen={onOpen}\r\n        customSearch={true}\r\n      />\r\n      <AddRole isOpen={isOpen} size={\"sm\"} setAction={setAction} onClose={onClose} />\r\n      {access && <RoleModal isOpen={roleModal}\r\n        setRoleModal={setRoleModal}\r\n        onOpen={onOpen}\r\n        isLoding={isLoding}\r\n        columnsData={rowColumns ?? []}\r\n        name={roleName}\r\n        _id={roleId}\r\n        tableData={access ?? []}\r\n        setAccess={setAccess}\r\n        fetchData={fetchData}\r\n        setAction={setAction}\r\n      />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"names":["props","columnsData","name","tableData","fetchData","setAccess","_id","setRoleModal","editModal","setEditModal","textColor","useColorModeValue","borderColor","columns","useMemo","isLoding","setIsLoding","useState","gopageValue","setGopageValue","data","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","setPageSize","state","pageSize","length","initialValues","roleName","access","formik","useFormik","enableReinitialize","onSubmit","values","_ref","resetForm","EditData","handleSubmit","setFieldValue","handleCheckboxChange","index","fieldName","secondFieldName","event","checked","target","leadsIndex","findIndex","accessItem","title","contactsIndex","updatedAccess","map","item","idx","updatedItem","update","delete","finalUpdatedAccessWith","_updatedAccess$contac","_updatedAccess$leadsI","view","includes","create","async","putApi","status","e","console","log","disable","cell","_values$access","some","i","useEffect","Array","isArray","_jsxs","Modal","onClose","isOpen","isCentered","size","children","_jsx","ModalOverlay","ModalContent","height","maxWidth","ModalHeader","textTransform","ModalCloseButton","ModalBody","overflow","Table","Thead","headerGroup","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","sx","width","pe","display","Flex","justify","align","fontSize","sm","lg","color","render","Tbody","Td","colSpan","justifyContent","alignItems","fontWeight","Spinner","Text","textAlign","DataNotFound","row","_row$cells","getRowProps","cells","Header","me","value","_cell$row","_values$access$i","_values$access$i2","Checkbox","disabled","original","isChecked","defaultChecked","onChange","_cell$row2","_values$access$i3","_values$access$i4","_values$access$i5","_values$access$i6","_values$access$i7","_values$access$i8","_values$access$i9","_values$access$i10","getCellProps","minW","md","ModalFooter","Button","variant","onClick","colorScheme","marginLeft","setUserModal","userModal","setOpenUser","userRole","selectedValues","setSelectedValues","getTableProps","canPreviousPage","canNextPage","pageCount","gotoPage","nextPage","previousPage","uniqueValues","Set","pre","style","mt","overflowY","mb","getHeaderProps","isSortable","getSortByToggleProps","center","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","prevSelectedValues","filter","selectedValue","Pagination","addUser","userData","setUserData","userFetchData","_result$data","result","getApi","user","_Fragment","RoleUser","setAction","onOpen","tableColumns","accessor","openUser","userdata","JSON","parse","localStorage","getItem","marginRight","marginTop","cursor","textDecoration","ChangeAccess","accessRole","UserModal","validationSchema","yup","required","description","AddData","errors","touched","handleBlur","handleChange","response","postApi","_response$response$da","toast","error","message","IconButton","icon","CloseIcon","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","placeholder","mr","Index","useDisclosure","roleModal","roleId","setRoleId","searchboxOutside","setSearchboxOutside","getTagValuesOutSide","setGetTagValuesOutside","displaySearchData","setDisplaySearchData","setRoleName","searchedData","setSearchedData","_cell$row$original","_cell$row2$original","rowColumns","action","setData","navigate","useNavigate","CommonCheckTable","columnData","allData","AdvanceSearch","tableCustomFields","searchedDataOut","searchDisplay","setSearchDisplay","setSearchedDataOut","BackButton","leftIcon","IoIosArrowBack","ml","deleteMany","checkBox","ManageGrid","customSearch","AddRole","RoleModal"],"sourceRoot":""}