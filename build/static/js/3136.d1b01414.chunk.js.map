{"version":3,"file":"static/js/3136.d1b01414.chunk.js","mappings":"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","sources":["components/commonTableModel/Contact.js","views/admin/phoneCall/add.js","views/admin/phoneCall/components/callAdvanceSearch.js","redux/slices/phoneCallSlice.js","views/admin/phoneCall/index.js","components/commonTableModel/ContactModel.js","../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","components/commonTableModel/LeadModel.js"],"sourcesContent":["import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\n\r\nexport default function ContactTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n+\r\n+        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead zIndex={1}>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      align=\"center\"\r\n                      justifyContent={column.center ? \"center\" : \"start\"}\r\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                      color=\" secondaryGray.900\"\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\r\n                        {column.render(\"Header\")}\r\n                      </span>\r\n\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n +\r\n +             <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  img\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"title\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"first Name\") {\r\n                      data = (\r\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\r\n                        <Text\r\n                          me=\"10px\"\r\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                        // </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"last Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"phone Number\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Email Address\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"physical Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"mailing Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Contact Method\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\r\nimport ContactModel from \"components/commonTableModel/ContactModel\";\r\nimport LeadModel from \"components/commonTableModel/LeadModel\";\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport dayjs from 'dayjs';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { LiaMousePointerSolid } from 'react-icons/lia';\r\nimport { phoneCallSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\n\r\n\r\nconst AddPhoneCall = (props) => {\r\n    const { onClose, isOpen, setAction } = props\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [assignToLeadData, setAssignToLeadData] = useState([]);\r\n    const [assignToContactData, setAssignToContactData] = useState([]);\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n    const todayTime = new Date().toISOString().split('.')[0];\r\n    const initialValues = {\r\n        sender: user?._id,\r\n        recipient: '',\r\n        callDuration: '',\r\n        callNotes: '',\r\n        createByContact: '',\r\n        createByLead: '',\r\n        startDate: '',\r\n        category: 'contact',\r\n        // assignTo: '',\r\n        // assignToLead: '',\r\n        createBy: user?._id,\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: phoneCallSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/phoneCall/add', values)\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    useEffect(async () => {\r\n        values.start = props?.date\r\n        try {\r\n            let result\r\n            if (values.category === \"Contact\" && assignToContactData.length <= 0) {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n                setAssignToContactData(result?.data)\r\n            } else if (values.category === \"Lead\" && assignToLeadData.length <= 0) {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\r\n                setAssignToLeadData(result?.data)\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [props?.date, values.category])\r\n\r\n    // const fetchRecipientData = async () => {\r\n    //     if (values.createByContact) {\r\n    //         let response = await getApi('api/contact/view/', values.createByContact)\r\n    //         if (response?.status === 200) {\r\n    //             setFieldValue('recipient', response?.data?.contact?.phoneNumber);\r\n    //             values.recipient = response?.data?.contact?.phoneNumber\r\n    //         }\r\n    //     } else if (values.createByLead) {\r\n    //         let response = await getApi('api/lead/view/', values.createByLead)\r\n    //         if (response?.status === 200) {\r\n    //             setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\r\n    //             values.recipient = response?.data?.lead?.leadPhoneNumber\r\n    //         }\r\n    //     } else {\r\n    //         setFieldValue('recipient', \"\");\r\n\r\n    //     }\r\n    // }\r\n    const fetchRecipientData = async () => {\r\n        if (values.createByContact) {\r\n            let findEmail = assignToContactData.find((item) => item._id === values.createByContact);\r\n            if (findEmail) {\r\n                setFieldValue('recipient', findEmail.phoneNumber);\r\n            }\r\n        } else if (values.createByLead) {\r\n            let findEmail = assignToLeadData.find((item) => item._id === values.createByLead);\r\n            if (findEmail) {\r\n                setFieldValue('recipient', findEmail.leadPhoneNumber);\r\n            }\r\n        } else {\r\n            setFieldValue('recipient', \"\");\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchRecipientData()\r\n    }, [values.createByContact, values.createByLead])\r\n\r\n\r\n    return (\r\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Add Call </ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {/* Contact Model  */}\r\n                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} fieldName='createByContact' setFieldValue={setFieldValue} />\r\n                    {/* Lead Model  */}\r\n                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} fieldName='createByLead' setFieldValue={setFieldValue} />\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Related\r\n                            </FormLabel>\r\n                            <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('createByContact', ''); setFieldValue('createByLead', ''); }} value={values.category}>\r\n                                <Stack direction='row'>\r\n                                    <Radio value='Contact'>Contact</Radio>\r\n                                    <Radio value='Lead'>Lead</Radio>\r\n                                </Stack>\r\n                            </RadioGroup>\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.category && touched.category && errors.category}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            {values.category === \"Contact\" ?\r\n                                <>\r\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                            Recipient  (Contact)\r\n                                        </FormLabel>\r\n                                        <Flex justifyContent={'space-between'}>\r\n                                            <Select\r\n                                                value={values.createByContact}\r\n                                                name=\"createByContact\"\r\n                                                onChange={handleChange}\r\n                                                mb={errors.createByContact && touched.createByContact ? undefined : '10px'}\r\n                                                fontWeight='500'\r\n                                                placeholder={'Assign To'}\r\n                                                borderColor={errors.createByContact && touched.createByContact ? \"red.300\" : null}\r\n                                            >\r\n                                                {assignToContactData?.map((item) => {\r\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.fullName}` : item.leadName}</option>\r\n                                                })}\r\n                                            </Select>\r\n                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                        </Flex>\r\n                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.createByContact && touched.createByContact && errors.createByContact}</Text>\r\n                                    </GridItem>\r\n                                </>\r\n                                : values.category === \"Lead\" ?\r\n                                    <>\r\n                                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n\r\n                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                                Recipient (Lead)\r\n                                            </FormLabel>\r\n                                            <Flex justifyContent={'space-between'}>\r\n                                                <Select\r\n                                                    value={values.createByLead}\r\n                                                    name=\"createByLead\"\r\n                                                    onChange={handleChange}\r\n                                                    mb={errors.createByLead && touched.createByLead ? undefined : '10px'}\r\n                                                    fontWeight='500'\r\n                                                    placeholder={'Assign To'}\r\n                                                    borderColor={errors.createByLead && touched.createByLead ? \"red.300\" : null}\r\n                                                >\r\n                                                    {assignToLeadData?.map((item) => {\r\n                                                        return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>\r\n                                                    })}\r\n                                                </Select>\r\n                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                            </Flex>\r\n                                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.createByLead && touched.createByLead && errors.createByLead}</Text>\r\n                                        </GridItem>\r\n                                    </>\r\n                                    : ''\r\n                            }\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Recipient<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                disabled\r\n                                value={values.recipient ? values.recipient : \"\"}\r\n                                name=\"recipient\"\r\n                                placeholder='Recipient'\r\n                                fontWeight='500'\r\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\r\n                            />\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Start Date<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\r\n                                value={values.startDate}\r\n                                name=\"startDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Call Duration<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.callDuration}\r\n                                name=\"callDuration\"\r\n                                placeholder='call Duration'\r\n                                fontWeight='500'\r\n                                borderColor={errors.callDuration && touched.callDuration ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callDuration && touched.callDuration && errors.callDuration}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Call Notes\r\n                            </FormLabel>\r\n                            <Textarea\r\n                                resize={'none'}\r\n                                fontSize='sm'\r\n                                placeholder='Enter Call Notes'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.callNotes}\r\n                                name=\"callNotes\"\r\n                                fontWeight='500'\r\n                                borderColor={errors.callNotes && touched.callNotes ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>\r\n                        </GridItem>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size=\"sm\" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button size=\"sm\" sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" onClick={() => {\r\n                            formik.resetForm()\r\n                            onClose()\r\n                        }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddPhoneCall\r\n","import React from 'react';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\n\r\nconst CallAdvanceSearch = (props) => {\r\n    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;\r\n    const dispatch = useDispatch();\r\n    const initialValues = {\r\n        senderName: '',\r\n        realetedTo: '',\r\n        createByName: '',\r\n    }\r\n    const validationSchema = yup.object({\r\n        senderName: yup.string(),\r\n        realetedTo: yup.string(),\r\n        createByName: yup.string(),\r\n\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            dispatch(setSearchValue(values))\r\n            dispatch(getSearchData({ values: values, allData: allData, type: 'Calls' }))\r\n            // const searchResult = allData?.filter(\r\n            //     (item) =>\r\n            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&\r\n            //         (!values?.realetedTo || (values.realetedTo === \"contact\" ? item.createBy : item.createByLead)) &&\r\n            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))\r\n            // )\r\n            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);\r\n\r\n\r\n            const getValue = [\r\n                {\r\n                    name: [\"senderName\"],\r\n                    value: values.senderName\r\n                },\r\n                {\r\n                    name: [\"realetedTo\"],\r\n                    value: values.realetedTo\r\n                },\r\n                {\r\n                    name: [\"createByName\"],\r\n                    value: values.createByName\r\n                }\r\n            ]\r\n            dispatch(setGetTagValues(getValue.filter(item => item.value)))\r\n            // setSearchedData(searchResult);\r\n            setDisplaySearchData(true)\r\n            setAdvanceSearch(false)\r\n            resetForm();\r\n            setSearchbox('');\r\n        }\r\n    })\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;\r\n\r\n    return (\r\n        <>\r\n            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Advance Search</ModalHeader>\r\n                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />\r\n                    <ModalBody>\r\n                        <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={2}>\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2}>\r\n                                    Sender Name\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values?.senderName}\r\n                                    name=\"senderName\"\r\n                                    placeholder='Enter senderName'\r\n                                    fontWeight='500'\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.senderName && touched.senderName && errors.senderName}</Text>\r\n\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2}>\r\n                                    Realeted To\r\n                                </FormLabel>\r\n                                <Select\r\n                                    value={values?.realetedTo}\r\n                                    fontSize='sm'\r\n                                    name=\"realetedTo\"\r\n                                    onChange={handleChange}\r\n                                    fontWeight='500'\r\n                                    placeholder={'Select Realeted To'}\r\n                                >\r\n                                    <option value='contact'>Contact</option>\r\n                                    <option value='lead'>Lead</option>\r\n                                </Select>\r\n                                <Text mb='10px' color={'red'}> {errors.realetedTo && touched.realetedTo && errors.realetedTo}</Text>\r\n\r\n                            </GridItem>\r\n\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2} >\r\n                                    Recipient\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values?.createByName}\r\n                                    name=\"createByName\"\r\n                                    placeholder='Enter Recipient'\r\n                                    fontWeight='500'\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.createByName && touched.createByName && errors.createByName}</Text>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button size=\"sm\" variant=\"brand\" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>\r\n                        <Button size=\"sm\" variant=\"outline\" colorScheme=\"red\" onClick={() => resetForm()}>Clear</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CallAdvanceSearch\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getApi } from '../../services/api'\r\n\r\nexport const fetchPhoneCallData = createAsyncThunk('fetchPhoneCallData', async () => {\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    try {\r\n        const response = await getApi(user.role === 'superAdmin' ? 'api/phoneCall' : `api/phoneCall?sender=${user._id}`);\r\n        return response;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n});\r\n\r\nconst phoneCallSlice = createSlice({\r\n    name: 'phoneCallData',\r\n    initialState: {\r\n        data: [],\r\n        isLoading: false,\r\n        error: \"\",\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchPhoneCallData.pending, (state) => {\r\n                state.isLoading = true;\r\n            })\r\n            .addCase(fetchPhoneCallData.fulfilled, (state, action) => {\r\n                state.isLoading = false;\r\n                state.data = action.payload;\r\n                state.error = \"\";\r\n            })\r\n            .addCase(fetchPhoneCallData.rejected, (state, action) => {\r\n                state.isLoading = false;\r\n                state.data = [];\r\n                state.error = action.error.message;\r\n            });\r\n    },\r\n});\r\n\r\nexport default phoneCallSlice.reducer;","\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\nimport { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';\r\nimport { getApi } from 'services/api';\r\nimport { HasAccess } from '../../../redux/accessUtils';\r\nimport CommonCheckTable from '../../../components/reactTable/checktable';\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\nimport { CiMenuKebab } from 'react-icons/ci';\r\nimport moment from 'moment';\r\nimport Add from './add';\r\nimport { MdLeaderboard } from 'react-icons/md';\r\nimport { IoIosContact } from 'react-icons/io';\r\nimport CallAdvanceSearch from './components/callAdvanceSearch';\r\nimport { fetchPhoneCallData } from '../../../redux/slices/phoneCallSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Index = (props) => {\r\n    const [action, setAction] = useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [selectedId, setDelete] = useState(false);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [advanceSearch, setAdvanceSearch] = useState(false);\r\n    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\r\n    const [searchboxOutside, setSearchboxOutside] = useState('');\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const navigate = useNavigate();\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [displaySearchData, setDisplaySearchData] = useState(false);\r\n    const [searchedData, setSearchedData] = useState([]);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [permission, leadAccess, contactAccess] = HasAccess([\"Calls\", 'Leads', 'Contacts']);\r\n    const actionHeader = {\r\n        Header: \"Action\", accessor: 'action', isSortable: false, center: true,\r\n        cell: ({ row }) => (\r\n            <Text fontSize=\"md\" fontWeight=\"900\" textAlign={\"center\"}>\r\n                <Menu isLazy  >\r\n                    <MenuButton><CiMenuKebab /></MenuButton>\r\n                    <MenuList minW={'fit-content'} transform={\"translate(1520px, 173px);\"}>\r\n                        {permission?.view && <MenuItem py={2.5} color={'green'} onClick={() => navigate(`/phone-call/${row?.values._id}`)} icon={<ViewIcon mb={'2px'} fontSize={15} />}>View</MenuItem>}\r\n                        {row?.original?.createByContact && contactAccess?.view ?\r\n                            <MenuItem width={\"165px\"} py={2.5} color={'black'} onClick={() => navigate(row?.original?.createByContact && `/contactView/${row?.original.createByContact}`)} icon={row?.original.createByContact && <IoIosContact fontSize={15} />}>  {(row?.original.createByContact && contactAccess?.view) && \"contact\"}\r\n                            </MenuItem>\r\n                            : ''}\r\n                        {row?.original.createByLead && leadAccess?.view ? <MenuItem width={\"165px\"} py={2.5} color={'black'} onClick={() => navigate(`/leadView/${row?.original.createByLead}`)} icon={row?.original.createByLead && leadAccess?.view && <MdLeaderboard style={{ marginBottom: '4px' }} fontSize={15} />}>{row?.original.createByLead && leadAccess?.view && 'lead'}</MenuItem> : ''}\r\n                    </MenuList>\r\n                </Menu>\r\n            </Text>\r\n        )\r\n    };\r\n    const tableColumns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n        {\r\n            Header: \"Recipient\", accessor: \"createByName\", cell: (cell) => (\r\n                <Link to={`/phone-call/${cell?.row?.values._id}`}>\r\n                    <Text\r\n                        me=\"10px\"\r\n                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                        color='brand.600'\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                    >\r\n                        {cell?.value || ' - '}\r\n                    </Text>\r\n                </Link>)\r\n        },\r\n        { Header: 'Sender Name', accessor: 'senderName' },\r\n        {\r\n            Header: \"Realeted To\", accessor: \"realeted\", cell: ({ row }) => (\r\n                <Text  >\r\n                    {row?.original.createByContact && contactAccess?.view ? <Link to={`/contactView/${row?.original.createByContact}`}>\r\n                        <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color={'brand.600'}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByContact && \"Contact\"}\r\n                        </Text>\r\n                    </Link> :\r\n                        <Text\r\n                            me=\"10px\"\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByContact && \"Contact\"}\r\n                        </Text>}\r\n\r\n                    {leadAccess?.view && row?.original.createByLead ? <Link to={`/leadView/${row?.original.createByLead}`}>\r\n                        <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color={'brand.600'}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByLead && \"Lead\"}\r\n                        </Text>\r\n                    </Link> : <Text\r\n                        me=\"10px\"\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                    >\r\n                        {row?.original.createByLead && \"Lead\"}\r\n                    </Text>}\r\n                </Text>\r\n            )\r\n        },\r\n        { Header: \"Timestamp\", accessor: \"timestamp\", },\r\n        {\r\n            Header: \"Created\", accessor: 'created', cell: ({ row }) => (\r\n                <Text fontSize=\"sm\" fontWeight=\"700\">\r\n                    {moment(row?.values.timestamp).format('(DD/MM) h:mma')}\r\n                </Text>\r\n            )\r\n        },\r\n        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])\r\n    ];\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        const result = await dispatch(fetchPhoneCallData())\r\n        if (result.payload.status === 200) {\r\n            setData(result?.payload?.data);\r\n        } else {\r\n            toast.error(\"Failed to fetch data\", \"error\");\r\n        }\r\n        setIsLoding(false)\r\n    }\r\n\r\n    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);\r\n    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [action])\r\n\r\n    return (\r\n        <div>\r\n            <CommonCheckTable\r\n                title={\"Calls\"}\r\n                isLoding={isLoding}\r\n                columnData={tableColumns ?? []}\r\n                // dataColumn={dataColumn ?? []}\r\n                allData={data ?? []}\r\n                tableData={data}\r\n                searchDisplay={displaySearchData}\r\n                setSearchDisplay={setDisplaySearchData}\r\n                searchedDataOut={searchedData}\r\n                setSearchedDataOut={setSearchedData}\r\n                tableCustomFields={[]}\r\n                access={permission}\r\n                // action={action}\r\n                // setAction={setAction}\r\n                // selectedColumns={selectedColumns}\r\n                // setSelectedColumns={setSelectedColumns}\r\n                // isOpen={isOpen}\r\n                // onClose={onclose}\r\n                onOpen={onOpen}\r\n                selectedValues={selectedValues}\r\n                setSelectedValues={setSelectedValues}\r\n                setDelete={setDelete}\r\n                deleteMany={true}\r\n                AdvanceSearch={\r\n                    <Button variant=\"outline\" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: \"5px\", md: \"0\" }} size=\"sm\" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>\r\n                }\r\n                getTagValuesOutSide={getTagValuesOutSide}\r\n                searchboxOutside={searchboxOutside}\r\n                setGetTagValuesOutside={setGetTagValuesOutside}\r\n                setSearchboxOutside={setSearchboxOutside}\r\n                handleSearchType=\"CallsSearch\"\r\n            />\r\n\r\n            <CallAdvanceSearch\r\n                advanceSearch={advanceSearch}\r\n                setAdvanceSearch={setAdvanceSearch}\r\n                setSearchedData={setSearchedData}\r\n                setDisplaySearchData={setDisplaySearchData}\r\n                allData={data ?? []}\r\n                setAction={setAction}\r\n                setGetTagValues={setGetTagValuesOutside}\r\n                setSearchbox={setSearchboxOutside}\r\n            />\r\n\r\n            <Add isOpen={isOpen} size={\"sm\"} onClose={onClose} setAction={setAction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ContactTable from './Contact.js'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable.js';\r\nimport { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';\r\nimport { fetchContactData } from '../../redux/slices/contactSlice.js';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const [selectedValues, setSelectedValues] = useState();\r\n    const [contactData, setContactData] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [columns, setColumns] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n        const result = await dispatch(fetchContactCustomFiled());\r\n        setContactData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            ...(result?.payload?.data?.[0]?.fields || [])\r\n                .filter(field => field?.isTableField === true)\r\n                .map(field => ({ Header: field?.label, accessor: field?.name }))\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    };\r\n    useEffect(async () => {\r\n        await dispatch(fetchContactData())\r\n        fetchCustomDataFields();\r\n    }, []);\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Contact</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex>\r\n                        :\r\n                        <CommonCheckTable\r\n                            title={'Contacts'}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n","import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable';\r\nimport { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchLeadData } from '../../redux/slices/leadSlice';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const title = \"Leads\";\r\n    const dispatch = useDispatch();\r\n\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [columns, setColumns] = useState([]);\r\n    const [leadData, setLeadData] = useState([]);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n\r\n        const result = await dispatch(fetchLeadCustomFiled());\r\n        setLeadData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            {\r\n                Header: \"Status\", accessor: \"leadStatus\", isSortable: true, center: true,\r\n                cell: ({ row }) => (\r\n                    row.original.leadStatus\r\n                )\r\n            },\r\n            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== \"leadStatus\" && { Header: field?.label, accessor: field?.name })) || []),\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLeadData())\r\n        fetchCustomDataFields();\r\n    }, [])\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Lead</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> :\r\n                        <CommonCheckTable\r\n                            title={title}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n"],"names":["ContactTable","props","columnsData","tableData","title","type","selectedValues","setSelectedValues","columns","useMemo","data","gopageValue","setGopageValue","JSON","parse","localStorage","getItem","useState","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","useColorModeValue","borderColor","handleCheckboxChange","event","value","target","checked","prevSelectedValues","filter","selectedValue","_jsxs","Card","direction","w","px","style","border","overflowX","sm","lg","children","_jsx","Flex","justify","mb","align","Text","color","fontSize","fontWeight","lineHeight","CountUpComponent","targetNumber","Box","overflowY","className","Table","variant","Thead","zIndex","map","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","justifyContent","center","textTransform","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","colSpan","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","colorScheme","isChecked","includes","onChange","me","getCellProps","minW","md","Pagination","onClose","isOpen","setAction","isLoding","setIsLoding","assignToLeadData","setAssignToLeadData","assignToContactData","setAssignToContactData","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","user","todayTime","Date","toISOString","split","initialValues","sender","_id","recipient","callDuration","callNotes","createByContact","createByLead","startDate","category","createBy","formik","useFormik","validationSchema","phoneCallSchema","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","postApi","status","pre","e","console","log","useEffect","start","date","result","_result","getApi","role","_result2","findEmail","find","item","phoneNumber","leadPhoneNumber","fetchRecipientData","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ContactModel","fieldName","LeadModel","Grid","templateColumns","gap","GridItem","base","FormLabel","display","ms","RadioGroup","Stack","Radio","_Fragment","Select","name","undefined","placeholder","fullName","leadName","IconButton","onClick","ml","icon","LiaMousePointerSolid","firstName","lastName","Input","disabled","onBlur","min","dayjs","format","Textarea","resize","ModalFooter","Button","size","Spinner","sx","marginLeft","allData","advanceSearch","setAdvanceSearch","setSearchedData","setDisplaySearchData","setSearchClear","setSearchbox","dispatch","useDispatch","yup","senderName","realetedTo","createByName","setSearchValue","getSearchData","getValue","setGetTagValues","dirty","mt","mr","fetchPhoneCallData","createAsyncThunk","error","createSlice","isLoading","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","onOpen","useDisclosure","selectedId","setDelete","getTagValuesOutSide","setGetTagValuesOutside","searchboxOutside","setSearchboxOutside","navigate","useNavigate","setData","displaySearchData","searchedData","permission","leadAccess","contactAccess","HasAccess","actionHeader","accessor","_row$original","textAlign","Menu","isLazy","MenuButton","CiMenuKebab","MenuList","transform","view","MenuItem","py","ViewIcon","original","width","_row$original2","IoIosContact","MdLeaderboard","marginBottom","tableColumns","Link","to","textDecoration","_ref2","_ref3","moment","timestamp","update","delete","_result$payload","toast","fetchData","CommonCheckTable","columnData","searchDisplay","setSearchDisplay","searchedDataOut","setSearchedDataOut","tableCustomFields","access","deleteMany","AdvanceSearch","leftIcon","SearchIcon","handleSearchType","CallAdvanceSearch","Add","_contactData$","_contactData$$fields","contactData","setContactData","setColumns","fetchContactData","_result$payload2","_result$payload2$data","_result$payload2$data2","fetchContactCustomFiled","tempTableColumns","fields","field","isTableField","label","fetchCustomDataFields","alignItems","ManageGrid","selectType","customSearch","GiClick","_extends","Object","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_excluded","forwardRef","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","rows","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","textarea","cx","__css","__DEV__","displayName","_leadData$","_leadData$$fields","leadData","setLeadData","fetchLeadData","_result$payload2$data3","_result$payload2$data4","fetchLeadCustomFiled","leadStatus"],"sourceRoot":""}