{"version":3,"file":"static/js/9600.c90a7491.chunk.js","mappings":"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","sources":["views/admin/invoice/components/InvoiceImport.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Papa from 'papaparse';\r\nimport {\r\n    Flex,\r\n    useColorModeValue,\r\n    Select,\r\n    Button,\r\n    Grid,\r\n    GridItem,\r\n    Text\r\n} from \"@chakra-ui/react\";\r\nimport { useFormik } from \"formik\";\r\nimport { postApi } from 'services/api';\r\nimport { toast } from 'react-toastify';\r\nimport moment from 'moment';\r\nimport ExcelJS from 'exceljs';\r\nimport Card from 'components/card/Card';\r\n\r\nfunction InvoiceImport() {\r\n\r\n    const location = useLocation();\r\n    const { fileData, customFields } = location.state || {};\r\n    const [importedFileFields, setImportedFileFields] = useState([]);\r\n    const [importedFileData, setImportedFileData] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const navigate = useNavigate();\r\n    const userId = JSON.parse(localStorage.getItem('user'))._id;\r\n    const [filterContact, setFilterContact] = useState([]);\r\n\r\n    const columns = [\r\n        { Header: 'Fields In Crm', accessor: 'crmFields' },\r\n        { Header: 'Fields In File', accessor: 'fileFields' },\r\n    ];\r\n\r\n    const initialFieldValues = Object.fromEntries(\r\n        (customFields || []).map(field => [field?.name, ''])\r\n    );\r\n    const initialValues = {\r\n        ...initialFieldValues\r\n    };\r\n\r\n    const fieldsInCrm = [\r\n        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))\r\n    ];\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        onSubmit: (values, { resetForm }) => {\r\n\r\n            const invoiceData = importedFileData?.map((item, ind) => {\r\n                const invoices = {\r\n                    createdDate: new Date(),\r\n                    deleted: item[values.deleted || \"deleted\"] || false,\r\n                    createBy: JSON.parse(localStorage.getItem('user'))._id,\r\n                    modifiedBy: JSON.parse(localStorage.getItem('user'))._id,\r\n                };\r\n\r\n                fieldsInCrm?.forEach(field => {\r\n                    const selectedField = values[field?.accessor];\r\n                    const fieldValue = item[selectedField] || '';\r\n\r\n                    if (field?.type?.toLowerCase() === \"date\") {\r\n                        invoices[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';\r\n                    } else if (field?.type?.toLowerCase() === \"number\" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {\r\n                        invoices[field?.accessor] = parseFloat(fieldValue) || '';\r\n                    } else if (field?.type?.toLowerCase() === \"number\") {\r\n                        invoices[field?.accessor] = parseInt(fieldValue, 10) || '';\r\n                    } else {\r\n                        invoices[field?.accessor] = fieldValue;\r\n                    }\r\n                });\r\n\r\n                return invoices;\r\n            });\r\n\r\n            AddData(invoiceData);\r\n        }\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\r\n\r\n    const AddData = async (invoices) => {\r\n        try {\r\n            setIsLoding(true);\r\n            let response = await postApi('api/invoices/addMany', invoices)\r\n            if (response.status === 200) {\r\n                toast.success(`Invoices imported successfully`)\r\n                resetForm();\r\n                navigate('/invoices');\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(`Invoices import failed`)\r\n            resetForm();\r\n            navigate('/invoices');\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const parseFileData = async (file) => {\r\n        const reader = new FileReader();\r\n        const extension = file.name.split('.').pop().toLowerCase();\r\n\r\n        reader.onload = async ({ target }) => {\r\n\r\n            if (extension === 'csv') {\r\n                const csv = Papa.parse(target.result, {\r\n                    header: true,\r\n                });\r\n                const parsedData = csv?.data;\r\n\r\n                if (parsedData && parsedData.length > 0) {\r\n                    setImportedFileData(parsedData);\r\n                    const fileHeadingFields = Object.keys(parsedData[0]);\r\n                    setImportedFileFields(fileHeadingFields);\r\n                } else {\r\n                    toast.error(\"Empty or invalid CSV file\");\r\n                    navigate(\"/invoices\");\r\n                }\r\n\r\n            } else if (extension === 'xlsx') {\r\n                const data = new Uint8Array(target.result);\r\n                const workbook = new ExcelJS.Workbook();\r\n\r\n                await workbook.xlsx.load(data);\r\n\r\n                const worksheet = workbook.getWorksheet(1);\r\n                const jsonData = [];\r\n\r\n                // Iterate over rows and cells\r\n                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {\r\n                    const rowData = {};\r\n                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\r\n                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;\r\n                    });\r\n                    jsonData.push(rowData);\r\n                });\r\n                jsonData?.splice(0, 1);\r\n                setImportedFileData(jsonData);\r\n\r\n                if (jsonData && jsonData.length > 0) {\r\n                    const fileHeadingFields = Object.keys(jsonData[0]);\r\n                    setImportedFileFields(fileHeadingFields);\r\n                } else {\r\n                    toast.error(\"Empty or invalid XLSX file\");\r\n                    navigate(\"/invoices\");\r\n                }\r\n            }\r\n        };\r\n\r\n        if (extension === 'csv') {\r\n            reader.readAsText(file);\r\n        } else if (extension === 'xlsx') {\r\n            const blob = new Blob([file]);\r\n            reader.readAsArrayBuffer(blob);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fileData && fileData.length > 0) {\r\n            const firstFile = fileData[0];\r\n            parseFileData(firstFile);\r\n        }\r\n    }, [fileData]);\r\n\r\n\r\n    useEffect(() => {\r\n        const filterContactData = importedFileFields?.filter(field => {\r\n            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);\r\n            if (result) {\r\n                setFieldValue(result?.accessor, field);\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        setFilterContact(filterContactData);\r\n    }, [importedFileFields]);\r\n\r\n    return (\r\n        <>\r\n            <Card overflowY={\"auto\"} className=\"importTable\">\r\n                <Text color={\"secondaryGray.900\"}\r\n                    fontSize=\"22px\"\r\n                    fontWeight=\"700\"\r\n                    mb='20px'\r\n                >Import Quotes</Text>\r\n                <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>\r\n                    {\r\n                        columns.map((column, index) => (\r\n                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: \"14px\", lg: \"14px\" }} color=\"secondaryGray.900\" style={{ textTransform: \"uppercase\" }}>\r\n                                {column.Header}\r\n                            </GridItem>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n                <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={1} overflowY={'auto'}>\r\n                    {\r\n                        fieldsInCrm?.map((item, index) => (\r\n                            <>\r\n                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>\r\n                                    {item.Header}\r\n                                </GridItem>\r\n                                <GridItem colSpan={{ base: 4 }}>\r\n                                    <Select\r\n                                        variant=\"flushed\"\r\n                                        fontWeight='500'\r\n                                        isSearchable\r\n                                        value={values[item.accessor]}\r\n                                        name={item.accessor}\r\n                                        onChange={handleChange}\r\n                                    >\r\n                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>\r\n                                        {\r\n                                            importedFileFields?.map(field => (\r\n                                                <option value={field} key={field}>{field}</option>\r\n                                            ))\r\n                                        }\r\n                                    </Select>\r\n                                </GridItem>\r\n                            </>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n\r\n                <Flex Flex justifyContent={'end'} mt='5' >\r\n                    <Button size=\"sm\" onClick={() => handleSubmit()} variant=\"brand\">Save</Button>\r\n                </Flex>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceImport"],"names":["location","useLocation","fileData","customFields","state","importedFileFields","setImportedFileFields","useState","importedFileData","setImportedFileData","isLoding","setIsLoding","navigate","useNavigate","filterContact","setFilterContact","JSON","parse","localStorage","getItem","_id","initialValues","Object","fromEntries","map","field","name","fieldsInCrm","_field$validations","Header","label","accessor","type","formikType","validations","find","obj","hasOwnProperty","formik","useFormik","onSubmit","values","_ref","resetForm","invoiceData","item","ind","invoices","createdDate","Date","deleted","createBy","modifiedBy","forEach","_field$type","_field$type2","_field$formikType","_field$type3","selectedField","fieldValue","toLowerCase","moment","isValid","includes","parseFloat","parseInt","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","postApi","status","toast","success","e","console","error","useEffect","length","reader","FileReader","extension","file","split","pop","onload","target","_ref2","csv","Papa","result","header","parsedData","data","fileHeadingFields","keys","Uint8Array","workbook","ExcelJS","xlsx","load","worksheet","getWorksheet","jsonData","eachRow","includeEmpty","row","rowNumber","rowData","eachCell","cell","colNumber","getCell","value","push","splice","readAsText","blob","Blob","readAsArrayBuffer","parseFileData","filterContactData","filter","_jsx","_Fragment","children","_jsxs","Card","overflowY","className","Text","color","fontSize","fontWeight","mb","Grid","templateColumns","pb","gap","borderBottom","column","index","GridItem","colSpan","base","sm","lg","style","textTransform","mt","id","Select","variant","isSearchable","onChange","Flex","justifyContent","Button","size","onClick"],"sourceRoot":""}