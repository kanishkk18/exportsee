{"version":3,"file":"static/js/1887.b6a0e8a0.chunk.js","mappings":"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","sources":["views/admin/task/components/AddEdit.js","components/commonTableModel/Contact.js","components/commonTableModel/ContactModel.js","components/commonTableModel/LeadModel.js"],"sourcesContent":["import { CloseIcon } from '@chakra-ui/icons';\r\nimport { Button, Checkbox, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\r\nimport ContactModel from \"components/commonTableModel/ContactModel\";\r\nimport LeadModel from \"components/commonTableModel/LeadModel\";\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { LiaMousePointerSolid } from 'react-icons/lia';\r\nimport { TaskSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\nimport moment from 'moment';\r\nimport { putApi } from 'services/api';\r\nimport dayjs from 'dayjs';\r\nimport { useSelector } from 'react-redux';\r\nimport { HasAccess } from \"../../../../redux/accessUtils\";\r\n\r\nconst AddEdit = (props) => {\r\n    const { onClose, isOpen, fetchData, userAction, setAction, id, view, data } = props\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const userId = JSON.parse(localStorage.getItem('user'))._id\r\n    const [assignToLeadData, setAssignToLeadData] = useState([]);\r\n    const [assignToContactData, setAssignToContactData] = useState([]);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n    const leadData = useSelector((state) => state?.leadData?.data);\r\n\r\n\r\n    const today = new Date().toISOString().split('T')[0];\r\n    const todayTime = new Date().toISOString().split('.')[0];\r\n\r\n    const [leadAccess, contactAccess] = HasAccess(['Leads', 'Contacts']);\r\n\r\n    const contactData = useSelector((state) => state?.contactData?.data)\r\n\r\n    const initialValues = {\r\n        title: '',\r\n        category: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',\r\n        description: '',\r\n        notes: '',\r\n        assignTo: props.leadContect === 'contactView' && id ? id : '',\r\n        assignToLead: props.leadContect === 'leadView' && id ? id : '',\r\n        reminder: '',\r\n        start: '',\r\n        end: '',\r\n        backgroundColor: '',\r\n        borderColor: '#ffffff',\r\n        textColor: '',\r\n        allDay: false,\r\n        display: '',\r\n        url: '',\r\n        createBy: userId,\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: TaskSchema,\r\n        enableReinitialize: true,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm()\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\r\n\r\n    const AddData = async () => {\r\n        if (userAction === \"add\") {\r\n            try {\r\n                setIsLoding(true)\r\n\r\n                if (values?.start) {\r\n                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');\r\n                }\r\n                if (values?.end) {\r\n                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');\r\n                }\r\n\r\n                let response = await postApi('api/task/add', values)\r\n                if (response.status === 200) {\r\n                    formik.resetForm()\r\n                    onClose();\r\n                    fetchData(1)\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        } else if (userAction === \"edit\") {\r\n            try {\r\n                setIsLoding(true)\r\n\r\n                if (values?.start) {\r\n                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');\r\n                }\r\n                if (values?.end) {\r\n                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');\r\n                }\r\n\r\n                let response = await putApi(`api/task/edit/${id}`, values)\r\n                if (response.status === 200) {\r\n                    formik.resetForm()\r\n                    onClose();\r\n                    setAction((pre) => !pre)\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    };\r\n    const fetchTaskData = async () => {\r\n        if (id) {\r\n            try {\r\n                setIsLoding(true)\r\n                let result = await getApi('api/task/view/', id)\r\n                setFieldValue('title', result?.data?.title)\r\n                setFieldValue('category', result?.data?.category)\r\n                setFieldValue('description', result?.data?.description)\r\n                setFieldValue('notes', result?.data?.notes)\r\n                setFieldValue('assignTo', result?.data?.assignTo)\r\n                setFieldValue('reminder', result?.data?.reminder)\r\n                setFieldValue('start', result?.data?.start)\r\n                setFieldValue('end', result?.data?.end)\r\n                setFieldValue('backgroundColor', result?.data?.backgroundColor)\r\n                setFieldValue('borderColor', result?.data?.borderColor)\r\n                setFieldValue('textColor', result?.data?.textColor)\r\n                setFieldValue('display', result?.data?.display)\r\n                setFieldValue('url', result?.data?.url)\r\n                setFieldValue(\"status\", result?.data?.status)\r\n                setFieldValue('assignToLead', result?.data?.assignToLead)\r\n                // setFieldValue('allDay', result?.data?.allDay === 'Yes' ? 'Yes' : 'No')\r\n                setFieldValue('allDay', result?.data?.allDay)\r\n\r\n                // setIsChecked(result?.data?.allDay === 'Yes' ? true : false)\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        } else if (data) {\r\n            setFieldValue('title', data?.title)\r\n            setFieldValue('category', data?.category)\r\n            setFieldValue('description', data?.description)\r\n            setFieldValue('notes', data?.notes)\r\n            setFieldValue('assignTo', data?.assignTo)\r\n            setFieldValue('reminder', data?.reminder)\r\n            setFieldValue('start', data?.start)\r\n            setFieldValue('end', data?.end)\r\n            setFieldValue('backgroundColor', data?.backgroundColor)\r\n            setFieldValue('borderColor', data?.borderColor)\r\n            setFieldValue('textColor', data?.textColor)\r\n            setFieldValue('display', data?.display)\r\n            setFieldValue('url', data?.url)\r\n            setFieldValue(\"status\", data?.status)\r\n            setFieldValue('assignToLead', data?.assignToLead)\r\n            setFieldValue('allDay', data?.allDay === 'Yes' ? 'Yes' : 'No')\r\n            setFieldValue('allDay', data?.allDay)\r\n\r\n            // setIsChecked(data?.allDay === 'Yes' ? true : false)\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        values.start = props?.date\r\n        if (view === true) {\r\n            if (values.category === \"Contact\" && assignToContactData.length <= 0) {\r\n                setAssignToContactData(contactData)\r\n                // result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n                // setAssignToContactData(result?.data)\r\n            } else if (values.category === \"Lead\" && assignToLeadData.length <= 0) {\r\n                setAssignToLeadData(leadData)\r\n            }\r\n        } else {\r\n            try {\r\n                let result\r\n                if (values.category === \"Contact\" && assignToContactData.length <= 0) {\r\n                    result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n                    setAssignToContactData(result?.data)\r\n                } else if (values.category === \"Lead\" && assignToLeadData.length <= 0) {\r\n                    result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\r\n                    setAssignToLeadData(result?.data)\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }, [props, values.category])\r\n    useEffect(() => {\r\n        if (userAction === \"edit\" || data) {\r\n            fetchTaskData()\r\n        }\r\n        fetchTaskData()\r\n\r\n    }, [userAction, id, data])\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} size={'xl'} >\r\n            {!props.from && <ModalOverlay />}\r\n            <ModalContent overflowY={\"auto\"} height={\"600px\"}>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    {\r\n                        userAction === \"add\" ? \"Create Task\" : \"Edit Task\"\r\n                    }\r\n\r\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody overflowY={\"auto\"} height={\"700px\"}>\r\n                    {/* Contact Model  */}\r\n                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} values={values} fieldName='assignTo' setFieldValue={setFieldValue} />\r\n                    {/* Lead Model  */}\r\n                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} values={values} fieldName='assignToLead' setFieldValue={setFieldValue} />\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex>\r\n                        :\r\n                        <Grid templateColumns=\"repeat(12, 1fr)\" gap={3} >\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Title<Text color={\"red\"}>*</Text>\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    name=\"title\"\r\n                                    placeholder='Title'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.title && touched?.title ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'} fontSize='sm'> {errors.title && touched.title && errors.title}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Related\r\n                                </FormLabel>\r\n                                <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('assignTo', null); setFieldValue('assignToLead', null); }} value={values.category}>\r\n                                    <Stack direction='row'>\r\n                                        <Stack direction='row'>\r\n                                            <Radio value='None'>None</Radio>\r\n                                            {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}\r\n                                            {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}\r\n                                            {!props.leadContect &&\r\n                                                <>\r\n                                                    {(user?.role === \"superAdmin\" || contactAccess?.create) && <Radio value='Contact'>Contact</Radio>}\r\n                                                    {(user?.role === \"superAdmin\" || leadAccess?.create) && <Radio value='Lead'>Lead</Radio>}\r\n                                                </>\r\n                                            }\r\n                                        </Stack>\r\n\r\n                                    </Stack>\r\n                                </RadioGroup>\r\n                                <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: values.category === \"None\" ? 12 : 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Description\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.description}\r\n                                    name=\"description\"\r\n                                    placeholder='Description'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.description && touched?.description ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.description && touched.description && errors.description}</Text>\r\n                            </GridItem>\r\n                            {values.category === \"Contact\" ?\r\n                                <>\r\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                            Assign To  Contact\r\n                                        </FormLabel>\r\n                                        <Flex justifyContent={'space-between'}>\r\n                                            <Select\r\n                                                value={values.assignTo}\r\n                                                name=\"assignTo\"\r\n                                                onChange={handleChange}\r\n                                                mb={errors.assignTo && touched.assignTo ? undefined : '10px'}\r\n                                                fontWeight='500'\r\n                                                placeholder={'Assign To'}\r\n                                                borderColor={errors.assignTo && touched.assignTo ? \"red.300\" : null}\r\n                                            >\r\n                                                {assignToContactData?.map((item) => {\r\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.fullName}` : item.leadName}</option>\r\n                                                })}\r\n                                            </Select>\r\n                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                        </Flex>\r\n                                        <Text mb='10px' color={'red'}> {errors.assignTo && touched.assignTo && errors.assignTo}</Text>\r\n                                    </GridItem>\r\n                                </>\r\n                                : values.category === \"Lead\" ?\r\n                                    <>\r\n                                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                                Assign To Lead\r\n                                            </FormLabel>\r\n                                            <Flex justifyContent={'space-between'}>\r\n                                                <Select\r\n                                                    value={values.assignToLead}\r\n                                                    name=\"assignToLead\"\r\n                                                    onChange={handleChange}\r\n                                                    mb={errors.assignToLead && touched.assignToLead ? undefined : '10px'}\r\n                                                    fontWeight='500'\r\n                                                    placeholder={'Assign To'}\r\n                                                    borderColor={errors.assignToLead && touched.assignToLead ? \"red.300\" : null}\r\n                                                >\r\n                                                    {assignToLeadData?.map((item) => {\r\n                                                        return <option value={item._id} key={item._id}>{item.leadName}</option>\r\n                                                    })}\r\n                                                </Select>\r\n                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                            </Flex>\r\n                                            <Text mb='10px' color={'red'}> {errors.assignToLead && touched.assignToLead && errors.assignToLead}</Text>\r\n                                        </GridItem>\r\n                                    </>\r\n                                    : ''\r\n                            }\r\n                            <GridItem colSpan={{ base: 12 }} >\r\n                                <Checkbox isChecked={values?.allDay} name='allDay'\r\n                                    onChange={handleChange}\r\n                                // onChange={(e) => {\r\n                                //     const target = e.target.checked;\r\n                                //     // setFieldValue('allDay', e.target.checked === true ? 'Yes' : 'No');\r\n                                //     setIsChecked(target);\r\n                                // }}\r\n                                >\r\n                                    All Day Task ?\r\n                                </Checkbox>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Start Date<Text color={\"red\"}>*</Text>\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type={values?.allDay ? 'date' : 'datetime-local'}\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    min={values?.allDay ? dayjs(today).format('YYYY-MM-DD') : dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\r\n                                    value={values?.allDay ? values?.start && dayjs(values?.start).format('YYYY-MM-DD') || null : values?.start && dayjs(values?.start).format('YYYY-MM-DD HH:mm') || null}\r\n                                    name=\"start\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.start && touched?.start ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.start && touched.start && errors.start}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    End Date\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type={values?.allDay ? 'date' : 'datetime-local'}\r\n                                    min={values.start}\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values?.allDay ? values?.end && dayjs(values?.end).format('YYYY-MM-DD') || null : values?.end && dayjs(values?.end).format('YYYY-MM-DD HH:mm') || null}\r\n                                    name=\"end\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.end && touched?.end ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Background-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    type='color'\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.backgroundColor}\r\n                                    name=\"backgroundColor\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.backgroundColor && touched?.backgroundColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.backgroundColor && touched.backgroundColor && errors.backgroundColor}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Border-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    type='color'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.borderColor}\r\n                                    name=\"borderColor\"\r\n                                    placeholder='borderColor'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.borderColor && touched?.borderColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.borderColor && touched.borderColor && errors.borderColor}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Text-Color\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    type='color'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.textColor}\r\n                                    name=\"textColor\"\r\n                                    placeholder='textColor'\r\n                                    fontWeight='500'\r\n                                    textColor={errors?.textColor && touched?.textColor ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.textColor && touched.textColor && errors.textColor}</Text>\r\n                            </GridItem>\r\n\r\n\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Url\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.url}\r\n                                    name=\"url\"\r\n                                    placeholder='Enter url'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.url && touched?.url ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.url && touched.url && errors.url}</Text>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Status\r\n                                </FormLabel>\r\n                                <Select\r\n                                    onChange={(e) => setFieldValue(\"status\", e.target.value)}\r\n                                    value={values?.status}\r\n                                    style={{ fontSize: \"14px\" }}>\r\n                                    <option value='todo'>Todo</option>\r\n                                    <option value='onHold'>On Hold</option>\r\n                                    <option value='pending'>Pending</option>\r\n                                    <option value='inProgress'>In Progress</option>\r\n                                    <option value='completed'>Completed</option>\r\n                                </Select>\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12 }} >\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Notes\r\n                                </FormLabel>\r\n                                <Textarea\r\n                                    resize={'none'}\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.notes}\r\n                                    name=\"notes\"\r\n                                    placeholder='Notes'\r\n                                    fontWeight='500'\r\n                                    borderColor={errors?.notes && touched?.notes ? \"red.300\" : null}\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit}>{userAction === \"add\" ? \"Save\" : \"Update\"}</Button>\r\n                    <Button type=\"reset\" sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" size=\"sm\" ml={2} onClick={() => { onClose(false); resetForm(); }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal >\r\n    )\r\n}\r\n\r\nexport default AddEdit\r\n","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\n\r\nexport default function ContactTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n+\r\n+        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead zIndex={1}>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      align=\"center\"\r\n                      justifyContent={column.center ? \"center\" : \"start\"}\r\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                      color=\" secondaryGray.900\"\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\r\n                        {column.render(\"Header\")}\r\n                      </span>\r\n\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n +\r\n +             <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  img\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"title\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"first Name\") {\r\n                      data = (\r\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\r\n                        <Text\r\n                          me=\"10px\"\r\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                        // </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"last Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"phone Number\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Email Address\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"physical Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"mailing Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Contact Method\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ContactTable from './Contact.js'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable.js';\r\nimport { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';\r\nimport { fetchContactData } from '../../redux/slices/contactSlice.js';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const [selectedValues, setSelectedValues] = useState();\r\n    const [contactData, setContactData] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [columns, setColumns] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n        const result = await dispatch(fetchContactCustomFiled());\r\n        setContactData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            ...(result?.payload?.data?.[0]?.fields || [])\r\n                .filter(field => field?.isTableField === true)\r\n                .map(field => ({ Header: field?.label, accessor: field?.name }))\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    };\r\n    useEffect(async () => {\r\n        await dispatch(fetchContactData())\r\n        fetchCustomDataFields();\r\n    }, []);\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Contact</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex>\r\n                        :\r\n                        <CommonCheckTable\r\n                            title={'Contacts'}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable';\r\nimport { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchLeadData } from '../../redux/slices/leadSlice';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const title = \"Leads\";\r\n    const dispatch = useDispatch();\r\n\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [columns, setColumns] = useState([]);\r\n    const [leadData, setLeadData] = useState([]);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n\r\n        const result = await dispatch(fetchLeadCustomFiled());\r\n        setLeadData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            {\r\n                Header: \"Status\", accessor: \"leadStatus\", isSortable: true, center: true,\r\n                cell: ({ row }) => (\r\n                    row.original.leadStatus\r\n                )\r\n            },\r\n            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== \"leadStatus\" && { Header: field?.label, accessor: field?.name })) || []),\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLeadData())\r\n        fetchCustomDataFields();\r\n    }, [])\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Lead</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> :\r\n                        <CommonCheckTable\r\n                            title={title}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n"],"names":["props","onClose","isOpen","fetchData","userAction","setAction","id","view","data","isChecked","setIsChecked","useState","userId","JSON","parse","localStorage","getItem","_id","assignToLeadData","setAssignToLeadData","assignToContactData","setAssignToContactData","user","isLoding","setIsLoding","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","leadData","useSelector","state","_state$leadData","today","Date","toISOString","split","todayTime","leadAccess","contactAccess","HasAccess","contactData","_state$contactData","initialValues","title","category","leadContect","description","notes","assignTo","assignToLead","reminder","start","end","backgroundColor","borderColor","textColor","allDay","display","url","createBy","formik","useFormik","validationSchema","TaskSchema","enableReinitialize","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","moment","format","postApi","status","e","console","log","putApi","pre","fetchTaskData","_result$data","_result$data2","_result$data3","_result$data4","_result$data5","_result$data6","_result$data7","_result$data8","_result$data9","_result$data10","_result$data11","_result$data12","_result$data13","_result$data14","_result$data15","_result$data16","result","getApi","useEffect","date","length","_result","role","_result2","_jsxs","Modal","size","children","from","_jsx","ModalOverlay","ModalContent","overflowY","height","ModalHeader","justifyContent","IconButton","onClick","icon","CloseIcon","ModalBody","ContactModel","fieldName","LeadModel","Flex","alignItems","width","Spinner","Grid","templateColumns","gap","GridItem","colSpan","base","md","FormLabel","ms","fontSize","fontWeight","mb","Text","color","Input","onChange","onBlur","value","name","placeholder","RadioGroup","Stack","direction","Radio","_Fragment","create","Select","undefined","map","item","fullName","leadName","ml","LiaMousePointerSolid","Checkbox","type","min","dayjs","sm","target","style","Textarea","resize","ModalFooter","Button","variant","sx","marginLeft","textTransform","colorScheme","ContactTable","columnsData","tableData","selectedValues","setSelectedValues","columns","useMemo","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageSize","useColorModeValue","handleCheckboxChange","event","checked","prevSelectedValues","filter","selectedValue","Card","w","px","border","overflowX","lg","justify","align","lineHeight","CountUpComponent","targetNumber","Box","className","Table","Thead","zIndex","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","center","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","includes","me","getCellProps","minW","Pagination","_contactData$","_contactData$$fields","setContactData","setColumns","dispatch","useDispatch","fetchContactData","_result$payload","_result$payload2","_result$payload2$data","_result$payload2$data2","fetchContactCustomFiled","payload","tempTableColumns","accessor","fields","field","isTableField","label","fetchCustomDataFields","ModalCloseButton","CommonCheckTable","columnData","allData","tableCustomFields","AdvanceSearch","ManageGrid","deleteMany","selectType","customSearch","disabled","leftIcon","GiClick","_leadData$","_leadData$$fields","setLeadData","fetchLeadData","_result$payload2$data3","_result$payload2$data4","fetchLeadCustomFiled","original","leadStatus"],"sourceRoot":""}