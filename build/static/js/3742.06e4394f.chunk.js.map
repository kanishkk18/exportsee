{"version":3,"file":"static/js/3742.06e4394f.chunk.js","mappings":"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","sources":["lib/utils.js","../node_modules/clsx/dist/clsx.mjs","views/admin/users/components/roleTable.js","views/admin/users/components/roleModal.js","components/ui/input.jsx","views/admin/users/components/storage.js","views/admin/users/View.js","views/admin/users/AddEditUser.js"],"sourcesContent":["import { clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import {\r\n  Box, Button,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport DataNotFound from \"components/notFoundData\";\r\nimport { useState } from \"react\";\r\nimport { FaCreativeCommonsBy } from \"react-icons/fa\";\r\n\r\n\r\nexport default function RoleTable(props) {\r\n  const { columnsData, tableData, title, fetchData, selectedValues, setSelectedValues, roleModal, setRoleModal } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n  const buttonbg = useColorModeValue(\"gray.200\", \"white\");\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    pageOptions,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      padding='0'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }\r\n      }\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n        {user?.role === 'superAdmin' && <Button onClick={() => setRoleModal(true)} leftIcon={<FaCreativeCommonsBy />} bg={buttonbg} size=\"sm\" colorScheme=\"gray\" >Change Role</Button>}\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead >\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    pe='10px'\r\n                    key={index}\r\n                    borderColor={borderColor}>\r\n                    <Flex\r\n                      justify='space-between'\r\n                      align='center'\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color='gray.400'>\r\n                      {column.render(\"Header\")}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    <DataNotFound />\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Role Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Description\") {\r\n                      data = (\r\n\r\n                        <Text\r\n                          me=\"10px\"\r\n                          //   sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          //   color='green.400'\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                          color={textColor}\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n\r\n      </Box>\r\n\r\n      {/* {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />} */}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { AddIcon } from '@chakra-ui/icons'\r\nimport { Button, Flex, Modal, Thead, Tbody, ModalBody, Tr, Th, Text, Td, Box, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Table, useColorModeValue, Checkbox } from '@chakra-ui/react'\r\nimport DataNotFound from 'components/notFoundData'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table'\r\nimport { putApi } from 'services/api'\r\n\r\nconst RoleModal = (props) => {\r\n    const {\r\n        columnsData,\r\n        tableData,\r\n        fetchData,\r\n        isOpen,\r\n        id,\r\n        onClose,\r\n        interestRoles\r\n    } = props;\r\n\r\n    const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n    const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n    const columns = useMemo(() => columnsData, [columnsData]);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n\r\n    const [gopageValue, setGopageValue] = useState();\r\n    const data = useMemo(() => tableData, [tableData]);\r\n\r\n    const tableInstance = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            initialState: { pageIndex: 0 },\r\n        },\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        usePagination\r\n    );\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        pageOptions,\r\n        state: { pageIndex, pageSize },\r\n    } = tableInstance;\r\n\r\n    if (pageOptions.length < gopageValue) {\r\n        setGopageValue(pageOptions.length);\r\n    }\r\n\r\n    const handleCheckboxChange = (event, value) => {\r\n        if (event.target.checked) {\r\n            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n        } else {\r\n            setSelectedValues((prevSelectedValues) =>\r\n                prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n            );\r\n        }\r\n    };\r\n\r\n    const uniqueValues = [...new Set(selectedValues)];\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let result = await putApi(`api/user/change-roles/${id}`, uniqueValues);\r\n            if (result && result.status === 200) {\r\n                fetchData()\r\n                onClose()\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        interestRoles?.map((item) => setSelectedValues((prevSelectedValues) => [...prevSelectedValues, item]))\r\n    }, [interestRoles])\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent >\r\n                <ModalHeader>Change Role</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> :\r\n                        <Box overflowY={\"auto\"} className=\"table-fix-container\">\r\n                            <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n                                <Thead>\r\n                                    {headerGroups?.map((headerGroup, index) => (\r\n                                        <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                                            {headerGroup.headers?.map((column, index) => (\r\n                                                <Th\r\n                                                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                                                    pe=\"10px\"\r\n                                                    key={index}\r\n                                                    borderColor={borderColor}\r\n                                                >\r\n                                                    <Flex\r\n                                                        justify=\"space-between\"\r\n                                                        align=\"center\"\r\n                                                        fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                                                        color=\"gray.400\"\r\n                                                    >\r\n                                                        {column.render(\"Header\")}\r\n\r\n                                                    </Flex>\r\n                                                </Th>\r\n                                            ))}\r\n                                        </Tr>\r\n                                    ))}\r\n                                </Thead>\r\n                                <Tbody {...getTableBodyProps()}>\r\n                                    {isLoding ?\r\n                                        <Tr>\r\n                                            <Td colSpan={columns?.length}>\r\n                                                <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                    <Spinner />\r\n                                                </Flex>\r\n                                            </Td>\r\n                                        </Tr>\r\n                                        : data?.length === 0 ? (\r\n                                            <Tr>\r\n                                                <Td colSpan={columns.length}>\r\n                                                    <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                        <DataNotFound />\r\n                                                    </Text>\r\n                                                </Td>\r\n                                            </Tr>\r\n                                        ) : page?.map((row, i) => {\r\n                                            prepareRow(row);\r\n                                            return (\r\n                                                <Tr {...row?.getRowProps()} key={i}>\r\n                                                    {row?.cells?.map((cell, index) => {\r\n                                                        let data = \"\";\r\n                                                        if (cell?.column.Header === \"#\") {\r\n                                                            data = (\r\n                                                                <Flex align=\"center\" >\r\n                                                                    <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                                                                    <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                                                                        {cell?.row?.index + 1}\r\n                                                                    </Text>\r\n                                                                </Flex>\r\n                                                            );\r\n                                                        } else if (cell?.column.Header === \"Role Name\") {\r\n                                                            data = (\r\n                                                                <Text\r\n                                                                    me=\"10px\"\r\n                                                                    color={textColor}\r\n                                                                    fontSize=\"sm\"\r\n                                                                    fontWeight=\"700\"\r\n                                                                >\r\n                                                                    {cell?.value}\r\n                                                                </Text>\r\n                                                            );\r\n                                                        } else if (cell?.column.Header === \"Description\") {\r\n                                                            data = (\r\n                                                                <Text\r\n                                                                    me=\"10px\"\r\n                                                                    color={textColor}\r\n                                                                    fontSize=\"sm\"\r\n                                                                    fontWeight=\"700\"\r\n                                                                >\r\n                                                                    {cell?.value ? cell?.value : ' - '}\r\n                                                                </Text>\r\n                                                            );\r\n                                                        }\r\n                                                        return (\r\n                                                            <Td\r\n                                                                {...cell?.getCellProps()}\r\n                                                                key={index}\r\n                                                                fontSize={{ sm: \"14px\" }}\r\n                                                                minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                                                                borderColor=\"transparent\"\r\n                                                            >\r\n                                                                {data}\r\n                                                            </Td>\r\n                                                        );\r\n                                                    })}\r\n                                                </Tr>\r\n                                            );\r\n                                        })}\r\n                                </Tbody>\r\n                            </Table>\r\n                        </Box>\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<AddIcon />}> {isLoding ? <Spinner /> : 'Add'}</Button>\r\n                    <Button size=\"sm\" variant=\"outline\"\r\n                        colorScheme=\"red\"\r\n                        sx={{\r\n                            marginLeft: 2,\r\n                            textTransform: \"capitalize\",\r\n                        }} onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default RoleModal\r\n","import * as React from \"react\"\r\n\r\nimport { cn } from \"../../lib/utils\"\r\n\r\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\r\n  return (\r\n    (<input\r\n      type={type}\r\n      className={cn(\r\n        \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props} />)\r\n  );\r\n})\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }\r\n","import { useEffect, useState } from \"react\";\r\nimport  Card  from \"components/card/Card\"; // Adjust the path as needed\r\nimport { BsCloudCheck } from \"react-icons/bs\";\r\nimport { getApi } from \"services/api\"; // Adjust the path to your API utility\r\n\r\nconst StorageCard = () => {\r\n  const [storageData, setStorageData] = useState({ usedStorage: 0, totalStorage: 1 });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    const result = await getApi('api/reporting'); // API endpoint for fetching storage details\r\n    if (result && result.status === 200) {\r\n      setStorageData(result?.data || { usedStorage: 0, totalStorage: 1 });\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const { usedStorage = 0, totalStorage = 1 } = storageData;\r\n  const percentageUsed = totalStorage > 0 ? (usedStorage / totalStorage) * 100 : 0;\r\n\r\n  return (\r\n    <Card className=\"h-full rounded-[20px] border-none shadow-none justify-end items-end py-8 \" extra={\"w-full min-h-full  p-4\"}>\r\n      {/* Your storage */}\r\n      <div className=\"mb-auto mt-4 flex flex-col items-center justify-center\">\r\n        <div className=\"mt-4 mb-2 flex items-center justify-center rounded-full p-[26px] text-5xl font-bold text-brand-500 bg-blue-600 text-white\">\r\n          <BsCloudCheck />\r\n        </div>\r\n        <h4 className=\"mb-px mt-4 text-2xl font-bold text-navy-700 dark:text-white\">\r\n          Your storage\r\n        </h4>\r\n        <p className=\"px-5 text-center text-base font-normal text-gray-600 md:!px-0 xl:!px-8\">\r\n          Supervise your drive space in the easiest way\r\n        </p>\r\n      </div>\r\n\r\n      {/* Progress bar */}\r\n      <div className=\"flex w-full flex-col mt-6 p-4\">\r\n        <div className=\"flex justify-between\">\r\n          <p className=\"text-sm font-medium text-gray-600\">{usedStorage.toFixed(1)} GB</p>\r\n          <p className=\"text-sm font-medium text-gray-600\">{totalStorage.toFixed(1)} GB</p>\r\n        </div>\r\n        <div className=\"mt-4 flex h-3 w-full items-center rounded-full bg-blue-100\">\r\n          <span\r\n            className=\"h-full rounded-full bg-blue-600 dark:bg-blue-600\"\r\n            style={{ width: `${percentageUsed}%` }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Loading Indicator */}\r\n      {isLoading && (\r\n        <div className=\" text-center text-gray-500\">\r\n          Loading storage details...\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default StorageCard;\r\n","import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport { Button, Flex, Grid, FormLabel, GridItem, Heading, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Text, useDisclosure } from \"@chakra-ui/react\";\r\nimport Card from \"components/card/Card\";\r\nimport { HSeparator } from \"components/separator/Separator\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getApi } from \"services/api\";\r\nimport Add from \"./Add\";\r\nimport Edit from \"./Edit\";\r\nimport RoleTable from \"./components/roleTable\";\r\nimport RoleModal from \"./components/roleModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUser } from \"../../../redux/slices/localSlice\";\r\nimport CommonDeleteModel from 'components/commonDeleteModel';\r\nimport { deleteApi } from \"services/api\";\r\nimport AddEditUser from './AddEditUser';\r\nimport { MdFileUpload, MdModeEditOutline, MdDeleteOutline } from \"react-icons/md\";\r\nimport { IoLogOutOutline } from \"react-icons/io5\";\r\nimport { BsCloudCheck } from \"react-icons/bs\";\r\nimport { Input } from \"../../../components/ui/input\";\r\nimport Storage from \"./components/storage\";\r\nimport { toast } from \"react-toastify\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst View = () => {\r\n\r\n  const RoleColumn = [\r\n    { Header: '#', accessor: '_id', width: 10, display: false },\r\n    { Header: 'Role Name', accessor: 'roleName' },\r\n    { Header: \"Description\", accessor: \"description\", }\r\n  ];\r\n  const dispatch = useDispatch()\r\n  const userData = useSelector(state => state.user.user)\r\n  const [isLogoutScheduled, setIsLogoutScheduled] = useState(false);\r\n\r\n  const userName = typeof userData === 'string' ? JSON.parse(userData) : userData\r\n\r\n  const param = useParams()\r\n  const navigate = useNavigate()\r\n  const handleOpenModal = (userData) => {\r\n    setEdit(true)\r\n    dispatch(setUser(userData)); // Dispatch setUser action to set user data\r\n  };\r\n\r\n\r\n  const [data, setData] = useState()\r\n  const [roleData, setRoleData] = useState([])\r\n  // const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const [edit, setEdit] = useState(false);\r\n  const [deleteModel, setDelete] = useState(false);\r\n  const [roleModal, setRoleModal] = useState(false);\r\n  const [isLoding, setIsLoding] = useState(false)\r\n  const [action, setAction] = useState(false)\r\n  const [userAction, setUserAction] = useState('')\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const size = \"lg\";\r\n\r\n  const handleOpen = (type) => {\r\n    setUserAction(type)\r\n    setIsOpen(true)\r\n  }\r\n  const handleClose = () => {\r\n    setIsOpen(false)\r\n  }\r\n\r\n  const fetchData = async () => {\r\n    setIsLoding(true)\r\n    let response = await getApi('api/user/view/', param.id)\r\n    setData(response.data);\r\n    setIsLoding(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (param.id) {\r\n      fetchData()\r\n    }\r\n  }, [action])\r\n\r\n  useEffect(async () => {\r\n    setIsLoding(true);\r\n    let result = await getApi(\"api/role-access\");\r\n    setRoleData(result.data);\r\n    setIsLoding(false);\r\n  }, [])\r\n\r\n\r\n  const handleDeleteClick = async () => {\r\n\r\n    try {\r\n      setIsLoding(true)\r\n      let response = await deleteApi(`api/user/delete/`, param.id)\r\n      if (response.status === 200) {\r\n        setDelete(false)\r\n        navigate(-1)\r\n        setAction((pre) => !pre)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    finally {\r\n      setIsLoding(false)\r\n    }\r\n  };\r\n\r\n\r\n\tconst logOut = (message) => {\r\n\t\tlocalStorage.clear();\r\n\t\tsessionStorage.clear();\r\n\t\tnavigate(\"/auth\");\r\n\t\tif (message) {\r\n\t\t\ttoast.error(message);\r\n\t\t} else {\r\n\t\t\ttoast.success(\"Log out Successfully\");\r\n\t\t}\r\n\t\tsetIsLogoutScheduled(true);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst token =\r\n\t\t\tlocalStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\r\n\r\n\t\tif (token) {\r\n\t\t\ttry {\r\n\t\t\t\tconst decodedToken = jwtDecode(token);\r\n\t\t\t\tconst currentTime = Date.now() / 1000; // Convert milliseconds to seconds\r\n\t\t\t\tif (decodedToken.exp < currentTime) {\r\n\t\t\t\t\tif (!isLogoutScheduled) {\r\n\t\t\t\t\t\tlogOut(\"Token has expired\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Schedule automatic logout when the token expires\r\n\t\t\t\t\tconst timeToExpire = (decodedToken.exp - currentTime) * 1000; // Convert seconds to milliseconds\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tif (!isLogoutScheduled) {\r\n\t\t\t\t\t\t\tlogOut(\"Token has expired\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, timeToExpire);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error decoding token:\", error);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [isLogoutScheduled]);\r\n\r\n\r\n  return (\r\n    <>\r\n      {isLoding ?\r\n        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n          <Spinner />\r\n        </Flex> : <div className=\"\">\r\n          <AddEditUser isOpen={isOpen} onClose={handleClose} data={data} selectedId={param?.id} userAction={userAction} setUserAction={setUserAction} fetchData={fetchData} />\r\n          <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='User' handleDeleteData={handleDeleteClick} ids={''} selectedValues={param.id} />\r\n\r\n          <Card display={'none'}>\r\n            <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>\r\n              <GridItem colSpan={{ base: 12, md: 6 }}>\r\n                <Heading size=\"md\" mb={3} textTransform={'capitalize'}>\r\n                  {data?.firstName || data?.lastName ? `${data?.firstName} ${data?.lastName}` : 'User'} Information\r\n                </Heading>\r\n\r\n              </GridItem>\r\n              <GridItem colSpan={{ base: 12, md: 6 }} className=\"hidden\" >\r\n                <Flex justifyContent={{ base: 'start', sm: 'start', md: 'end' }}>\r\n                  {data?.role === 'superAdmin' && <Menu>\r\n                    <MenuButton variant=\"outline\" colorScheme='blackAlpha' size=\"sm\" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>\r\n                      Actions\r\n                    </MenuButton>\r\n                    <MenuDivider />\r\n                    <MenuList minWidth={'13rem'}>\r\n                      <MenuItem alignItems={\"start\"} onClick={() => handleOpen('add')} icon={<AddIcon />}>Add</MenuItem>\r\n                      <MenuItem alignItems={\"start\"} onClick={() => handleOpen('edit')} icon={<EditIcon />} color='green'>Edit</MenuItem>\r\n                      {data?.role !== 'superAdmin' && JSON.parse(localStorage.getItem('user'))?.role === 'superAdmin' && <>\r\n                        <MenuDivider />\r\n                        <MenuItem alignItems={\"start\"} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>\r\n                      </>}\r\n                    </MenuList>\r\n                  </Menu>}\r\n                  <Link to=\"/user\">\r\n                    <Button leftIcon={<IoIosArrowBack />} variant=\"brand\" size=\"sm\">\r\n                      Back\r\n                    </Button>\r\n                  </Link>\r\n                </Flex>\r\n              </GridItem>\r\n            </Grid>\r\n            <HSeparator />\r\n            <Grid templateColumns={'repeat(2, 1fr)'} gap={4} mt='5' display={'none'}>\r\n              <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> First Name </Text>\r\n                <Text>{data?.firstName ? data?.firstName : ' - '}</Text>\r\n              </GridItem>\r\n              <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Last Name </Text>\r\n                <Text>{data?.lastName ? data?.lastName : ' - '}</Text>\r\n              </GridItem>\r\n              <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}>Phone Number</Text>\r\n                <Text>{data?.phoneNumber ? data?.phoneNumber : ' - '}</Text>\r\n              </GridItem>\r\n              <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> User Email </Text>\r\n                <Text>{data?.username ? data?.username : ' - '}</Text>\r\n              </GridItem>\r\n            </Grid>\r\n          </Card>\r\n\r\n          {data?.role !== 'superAdmin' && <Card mt={3}>\r\n            <RoleTable fetchData={fetchData} columnsData={RoleColumn ?? []} roleModal={roleModal} setRoleModal={setRoleModal} tableData={data?.roles || []} title={'Role'} />\r\n          </Card>}\r\n          <RoleModal fetchData={fetchData} isOpen={roleModal} onClose={setRoleModal} columnsData={RoleColumn ?? []} id={param.id} tableData={roleData ?? []} interestRoles={data?.roles.map((item) => item._id)} />\r\n\r\n          <Card mt={3} display={'none'}>\r\n            <Grid templateColumns=\"repeat(6, 1fr)\" gap={1}>\r\n              <GridItem colStart={6} >\r\n                <Flex justifyContent={\"right\"}>\r\n                  <Button onClick={() => { handleOpenModal(userData); handleOpen('edit') }} leftIcon={<EditIcon />} mr={2.5} variant=\"outline\" size=\"sm\" colorScheme=\"green\">Edit</Button>\r\n                  {data?.role !== 'superAdmin' && JSON.parse(localStorage.getItem('user'))?.role === 'superAdmin' && <Button size=\"sm\" style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme=\"red\" >Delete</Button>}\r\n                </Flex>\r\n              </GridItem>\r\n            </Grid>\r\n          </Card>\r\n        </div>}\r\n\r\n      <div className=\"flex bg-muted/100 dark:bg-transparent p-10 w-full flex-col gap-5\">\r\n        <div className=\"flex justify-end w-full \">\r\n          {data?.role === 'superAdmin' && <Menu>\r\n            <MenuButton variant=\"outline\" colorScheme='blackAlpha' size=\"sm\" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>\r\n              Actions\r\n            </MenuButton>\r\n            <MenuDivider />\r\n            <MenuList minWidth={'13rem'}>\r\n              <MenuItem alignItems={\"start\"} onClick={() => handleOpen('add')} icon={<AddIcon />}>Add</MenuItem>\r\n              <MenuItem alignItems={\"start\"} onClick={() => handleOpen('edit')} icon={<EditIcon />} color='green'>Edit</MenuItem>\r\n              {data?.role !== 'superAdmin' && JSON.parse(localStorage.getItem('user'))?.role === 'superAdmin' && <>\r\n                <MenuDivider />\r\n                <MenuItem alignItems={\"start\"} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>\r\n              </>}\r\n            </MenuList>\r\n          </Menu>}\r\n          <Link to=\"/user\">\r\n            <Button leftIcon={<IoIosArrowBack />} variant=\"brand\" size=\"sm\">\r\n              Back\r\n            </Button>\r\n          </Link>\r\n        </div >\r\n        <div className=\"w-full flex h-fit flex-col gap-5 lg:grid lg:grid-cols-12\">\r\n\r\n          <div className=\"col-span-4 lg:!mb-0\">\r\n\r\n            <Card extra={\"items-center w-full h-full p-[16px] bg-cover\"}>\r\n              {/* Background and profile */}\r\n              <div\r\n                className=\"relative mt-0 flex h-32 w-full justify-center rounded-xl bg-cover\"\r\n                style={{\r\n                  backgroundImage: \"url(https://horizon-ui.com/chakra-pro/static/media/NftBanner3.b1cb888b1b6c5b0f4b8e.png)\",\r\n                }}\r\n              >\r\n                <div className=\"absolute -bottom-12 flex h-[87px] w-[87px] items-center justify-center rounded-full border-[4px] border-white bg-pink-400 dark:!border-navy-700\">\r\n\r\n                  <img\r\n\r\n                    src=\"https://i.pinimg.com/736x/b2/c3/13/b2c313cc44ec3a772b47f2dcec621ffd.jpg\"\r\n                    alt=\"profile\"\r\n                    className=\"h-full w-full rounded-full object-cover cursor-pointer\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\" flex w-full justify-end pt-3 \">\r\n                <span className=\"text-3xl text-red-600 cursor-pointer\" onClick={logOut}><IoLogOutOutline />\r\n                </span>\r\n\r\n              </div>\r\n\r\n              {/* Name and position */}\r\n              <div className=\"mt-8 flex flex-col items-center\">\r\n                <h4 className=\"text-2xl font-bold pb-5 text-navy-700 dark:text-white\">\r\n                  {data?.firstName || data?.lastName ? `${data?.firstName} ${data?.lastName}` : 'User'}\r\n                </h4>\r\n                <p className='text-small font-semibold '>Id : {data?._id}</p>\r\n               </div>\r\n\r\n\r\n\r\n              {/* Post followers */}\r\n              <div className=\"mt-6 mb-3 flex justify-between \">\r\n                <div className=\"flex flex-col space-y-2 items-center justify-center\">\r\n                  <p className=\"text-md font-bold text-navy-700 dark:text-white\">{data?.phoneNumber}</p>\r\n                  <p className=\"text-sm font-normal text-gray-600\">Number</p>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col space-y-2 items-center justify-center\">\r\n                  <p className=\"text-md font-bold text-navy-700 dark:text-white\">\r\n                  {data?.username ? data?.username : ' - '}\r\n                  </p>\r\n                  <p className=\"text-sm font-normal text-gray-600\">Email</p>\r\n\r\n                </div>\r\n                <div className=\"flex flex-col space-y-2 items-center justify-center\">\r\n                  <p className=\"text-md font-bold text-navy-700 dark:text-white\">\r\n                    {data?.role}\r\n                  </p>\r\n                  <p className=\"text-sm font-normal text-gray-600\">Role</p>\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </Card>\r\n          </div>\r\n\r\n          <div className=\"col-span-3 lg:!mb-0\">\r\n            <Storage />\r\n          </div>\r\n\r\n          <div className=\"z-0 col-span-5 lg:!zzmb-0\">\r\n            <Card className=\"grid h-full w-full grid-cols-1 gap-3 rounded-[20px] bg-white bg-clip-border p-3 font-dm shadow-3xl shadow-shadow-500  dark:shadow-none 2xl:grid-cols-11\">\r\n              <Link to=\"/documents\" className=\"col-span-5 h-full w-full rounded-xl bg-muted/80 dark:!bg-navy-700 2xl:col-span-6\">\r\n                <button className=\"flex h-full w-full flex-col items-center justify-center rounded-xl border-[2px] border-dashed border-gray-200 py-3 dark:!border-navy-700 lg:pb-0\">\r\n                  <MdFileUpload className=\"text-[80px] text-blue-600 \" />\r\n                  <h4 className=\"text-xl font-bold text-blue-600 dark:text-white\">\r\n                    Upload Files\r\n                  </h4>\r\n                  <p className=\"mt-2 text-sm font-medium text-blue-600\">\r\n                    PNG, JPG and GIF files are allowed\r\n                  </p>\r\n                </button>\r\n              </Link>\r\n\r\n              <div className=\"col-span-5 flex h-full w-full flex-col justify-center overflow-hidden rounded-xl bg-white pl-3 pb-4 dark:!bg-navy-800\">\r\n                <h5 className=\"text-left text-xl font-bold leading-9 text-navy-700 dark:text-white\">\r\n                Upload Files                </h5>\r\n                <p className=\"leading-1 mt-2 text-base font-normal text-gray-600\">\r\n                Accepted File Types (Images, PDFs, Word docs, Powerpoint, Excel, ZIP, and video files - 15MB max)\r\n                </p>\r\n                <button\r\n                  href=\" \"\r\n                  className=\"linear mt-4 flex items-center justify-center rounded-xl bg-blue-600 px-2 py-2 text-base font-medium text-white transition duration-200 hover:bg-brand-600 active:bg-brand-700 dark:bg-brand-400 dark:text-white dark:hover:bg-brand-300 dark:active:bg-brand-200\"\r\n                >\r\n                  Publish now\r\n                </button>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"grid h-full grid-cols-1 gap-5 lg:!grid-cols-12\">\r\n         {/* <div className=\"col-span-5 lg:col-span-6 lg:mb-0 3xl:col-span-4\">\r\n            <Card extra={\"w-full p-4 h-full\"}>\r\n              <div className=\"mb-8 w-full\">\r\n                <h4 className=\"text-xl font-bold text-navy-700 dark:text-white\">\r\n                  My Properties\r\n                </h4>\r\n                <p className=\"mt-2 text-base text-gray-600\">\r\n                  Here you can find more details about your properties. Keep you user\r\n                  engaged by providing meaningful information.\r\n                </p>\r\n\r\n              </div>\r\n\r\n\r\n              <div className=\" overflow-hidden\">\r\n\r\n                <div className=\"flex w-full items-center justify-between rounded-2xl bg-white p-3 shadow-3xl shadow-shadow-500 dark:!bg-navy-700 dark:shadow-none\">\r\n\r\n                  <div className=\"flex items-center\" >\r\n                    <Link to=\"#\">\r\n                      <img className=\"h-[83px] w-[83px] rounded-lg\" src=\"https://i.pinimg.com/736x/b2/c3/13/b2c313cc44ec3a772b47f2dcec621ffd.jpg\" alt=\"\" />\r\n                    </Link>\r\n                    <div className=\"ml-4\">\r\n                      <Link className='text-slate-700 font-semibold hover:underline truncate' to=\"\">\r\n                        <p>Independent Villa</p>\r\n                      </Link>\r\n                      <p className=\"text-md text-gray-500 \" > tower-26 paras tierea</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex flex-col gap-4\">\r\n                    <Link to=\"\"\r\n                      className=\"mr-4 flex items-center justify-center text-gray-600 dark:text-white\">\r\n                      <MdModeEditOutline />\r\n                    </Link>\r\n                    <button className='text-red-600 uppercase text-xl'>\r\n                      <MdDeleteOutline />\r\n                    </button>\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </Card> \r\n          </div>*/}\r\n\r\n          <div className=\"col-span-5 lg:col-span-6 lg:mb-0 3xl:col-span-5\">\r\n            <Card extra={\"w-full h-full p-3\"}>\r\n              {/* Header */}\r\n              <div className=\"mt-2 mb-8 w-full\">\r\n                <h4 className=\"px-2 text-xl font-bold text-navy-700 dark:text-white\">\r\n                  Update User Info\r\n                </h4>\r\n\r\n              </div>\r\n              {/* Cards */}\r\n              <div className=\"p-6\">\r\n\r\n                <form action=\"\" className=\"space-y-3 flex w-full flex-col  \" >\r\n                  <FormLabel>Name</FormLabel>\r\n                  <Input type=\"text\" placeholder=\"Username\" id=\"username\" defaultValue={data?.firstName} className=\"border p-3 rounded-lg\" />\r\n                  <FormLabel>Phone</FormLabel>\r\n                  <Input type=\"phone\" placeholder=\"Phone\" id=\"phone\" defaultValue={data?.phoneNumber} className=\"border p-3 rounded-lg\" />\r\n                  <FormLabel>Email</FormLabel>\r\n                  <Input type=\"email\" placeholder=\"Email\" id=\"email\" defaultValue={data?.username} className=\"border p-3 rounded-lg\" />\r\n\r\n                  <Button onClick={() => { handleOpenModal(userData); handleOpen('edit') }} leftIcon={<EditIcon />} mr={2.5} mt={4} variant=\"outline\" size=\"sm\" colorScheme=\"green\">Edit</Button>\r\n\r\n                </form>\r\n                <div className=\"flex py-4 justify-between items-center\">\r\n\r\n                  <button className=\"bg-red-500 text-white flex justify-center items-center gap-2 p-2 text-sm rounded-lg\" onClick={() => setDelete(true)}><DeleteIcon /> Delete Account</button>\r\n\r\n                  <button className=\"bg-blue-600 p-1 flex rounded-lg justify-center items-center gap-2 cursor-pointer text-xl text-white\" variant=\"outline\" onClick={logOut} ><IoLogOutOutline /> Logout</button>\r\n\r\n                </div>\r\n              </div>\r\n\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default View\r\n","import React, { useState } from 'react';\r\nimport { FormLabel, Grid, GridItem,Button, Icon, IconButton, Input, InputGroup, InputLeftElement, InputRightElement, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, Select } from '@chakra-ui/react';\r\nimport { CloseIcon, PhoneIcon } from '@chakra-ui/icons';\r\nimport { MdOutlineRemoveRedEye } from 'react-icons/md';\r\nimport { RiEyeCloseLine } from 'react-icons/ri';\r\nimport { useFormik } from 'formik';\r\nimport { toast } from 'react-toastify';\r\nimport { userSchema } from 'schema';\r\nimport { putApi, postApi } from 'services/api';\r\nimport Spinner from 'components/spinner/Spinner';\r\n\r\nconst AddEditUser = (props) => {\r\n    const { onClose, isOpen, setAction, data, userAction, userData, selectedId, fetchData, setUserAction } = props;\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [show, setShow] = React.useState(false);\r\n    const showPass = () => setShow(!show);\r\n\r\n    const initialValues = {\r\n        firstName: userAction === \"add\" ? '' : data?.firstName,\r\n        lastName: userAction === \"add\" ? '' : data?.lastName,\r\n        username: userAction === \"add\" ? '' : data?.username,\r\n        phoneNumber: userAction === \"add\" ? '' : data?.phoneNumber,\r\n        password: userAction === \"add\" ? '' : data?.password,\r\n        passwordExpirationPeriod: userAction === \"add\" ? '3days' : data?.passwordExpirationPeriod,\r\n    };\r\n\r\n    const user = JSON.parse(window.localStorage.getItem('user'));\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: userSchema,\r\n        enableReinitialize: true,\r\n        onSubmit: (values) => {\r\n            AddData();\r\n        },\r\n    });\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, resetForm } = formik;\r\n\r\n    const AddData = async () => {\r\n        if (userAction === \"add\") {\r\n            try {\r\n                setIsLoding(true);\r\n                let response = await postApi('api/user/register', values);\r\n                if (response && response.status === 200) {\r\n                    onClose();\r\n                    resetForm();\r\n                    setAction((pre) => !pre);\r\n                    setUserAction('');\r\n                } else {\r\n                    toast.error(response.response.data?.message);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            } finally {\r\n                setIsLoding(false);\r\n            }\r\n        } else if (userAction === \"edit\") {\r\n            try {\r\n                setIsLoding(true);\r\n                let response = await putApi(`api/user/edit/${selectedId}`, values);\r\n                if (response && response.status === 200) {\r\n                    fetchData();\r\n                    let updatedUserData = userData;\r\n                    if (user?._id === selectedId) {\r\n                        if (updatedUserData && typeof updatedUserData === 'object') {\r\n                            updatedUserData = {\r\n                                ...updatedUserData,\r\n                                firstName: values?.firstName,\r\n                                lastName: values?.lastName,\r\n                                passwordExpirationPeriod: values?.passwordExpirationPeriod,\r\n                            };\r\n                        }\r\n                        localStorage.setItem('user', JSON.stringify(updatedUserData));\r\n                    }\r\n                    onClose();\r\n                    setUserAction('');\r\n                    setAction((pre) => !pre);\r\n                } else {\r\n                    toast.error(response.response.data?.message);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            } finally {\r\n                setIsLoding(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader justifyContent='space-between' display='flex'>\r\n                    {userAction === \"add\" ? \"Add\" : \"Edit\"} User\r\n                    <IconButton onClick={onClose} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                First Name<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.firstName}\r\n                                name=\"firstName\"\r\n                                placeholder='First Name'\r\n                                fontWeight='500'\r\n                                borderColor={errors.firstName && touched.firstName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}>{errors.firstName && touched.firstName && errors.firstName}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Last Name\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.lastName}\r\n                                name=\"lastName\"\r\n                                placeholder='Last Name'\r\n                                fontWeight='500'\r\n                                borderColor={errors.lastName && touched.lastName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}>{errors.lastName && touched.lastName && errors.lastName}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Email<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                type='email'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.username}\r\n                                name=\"username\"\r\n                                placeholder='Email Address'\r\n                                fontWeight='500'\r\n                                borderColor={errors.username && touched.username ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}>{errors.username && touched.username && errors.username}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Phone Number<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <InputGroup>\r\n                                <InputLeftElement\r\n                                    pointerEvents=\"none\"\r\n                                    children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\r\n                                />\r\n                                <Input\r\n                                    type=\"tel\"\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.phoneNumber}\r\n                                    name=\"phoneNumber\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors.phoneNumber && touched.phoneNumber ? \"red.300\" : null}\r\n                                    placeholder=\"Phone number\"\r\n                                    borderRadius=\"16px\"\r\n                                />\r\n                            </InputGroup>\r\n                            <Text mb='10px' color={'red'}>{errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Password Expiration<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Select\r\n                                name=\"passwordExpirationPeriod\"\r\n                                value={values.passwordExpirationPeriod}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                fontSize='sm'\r\n                                fontWeight='500'\r\n                            >\r\n                                <option value=\"3days\">3 Days</option>\r\n                                <option value=\"1month\">1 Month</option>\r\n                                <option value=\"6months\">6 Months</option>\r\n                                <option value=\"1year\">1 Year</option>\r\n                                <option value=\"forever\">Forever</option>\r\n                            </Select>\r\n                        </GridItem>\r\n\r\n                        {userAction !== \"edit\" && (\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                    Password\r\n                                </FormLabel>\r\n                                <InputGroup size='md'>\r\n                                    <Input\r\n                                        isRequired={true}\r\n                                        fontSize='sm'\r\n                                        placeholder='Enter Your Password'\r\n                                        name='password'\r\n                                        size='lg'\r\n                                        variant='auth'\r\n                                        type={show ? \"text\" : \"password\"}\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        borderColor={errors.password && touched.password ? \"red.300\" : null}\r\n                                        className={errors.password && touched.password ? \"isInvalid\" : null}\r\n                                    />\r\n                                    <InputRightElement display='flex' alignItems='center' mt='4px'>\r\n                                        <Icon\r\n                                            color={'gray.400'}\r\n                                            _hover={{ cursor: \"pointer\" }}\r\n                                            as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}\r\n                                            onClick={showPass}\r\n                                        />\r\n                                    </InputRightElement>\r\n                                </InputGroup>\r\n                                <Text mb='10px' color={'red'}>{errors.password && touched.password && errors.password}</Text>\r\n                            </GridItem>\r\n                        )}\r\n                    </Grid>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        variant='brand'\r\n                        size=\"sm\"\r\n                        disabled={isLoding}\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        {isLoding ? <Spinner /> : 'Save'}\r\n                    </Button>\r\n                    <Button\r\n                        sx={{\r\n                            marginLeft: 2,\r\n                            textTransform: \"capitalize\",\r\n                        }}\r\n                        variant=\"outline\"\r\n                        colorScheme=\"red\"\r\n                        size=\"sm\"\r\n                        onClick={() => {\r\n                            formik.resetForm();\r\n                            onClose();\r\n                        }}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddEditUser;"],"names":["cn","_len","arguments","length","inputs","Array","_key","twMerge","clsx","r","e","t","f","n","isArray","o","RoleTable","props","columnsData","tableData","title","fetchData","selectedValues","setSelectedValues","roleModal","setRoleModal","columns","useMemo","data","user","JSON","parse","localStorage","getItem","gopageValue","setGopageValue","useState","buttonbg","useColorModeValue","textColor","borderColor","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","state","pageSize","_jsxs","Card","direction","w","padding","px","style","border","overflowX","sm","lg","children","Flex","justify","mb","align","Text","color","fontSize","fontWeight","lineHeight","_jsx","CountUpComponent","targetNumber","role","Button","onClick","leftIcon","FaCreativeCommonsBy","bg","size","colorScheme","Box","overflowY","className","Table","variant","Thead","map","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","getSortByToggleProps","pe","render","Tbody","Td","colSpan","textAlign","width","DataNotFound","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","me","value","getCellProps","minW","md","isOpen","id","onClose","interestRoles","isLoding","setIsLoding","uniqueValues","Set","useEffect","item","prevSelectedValues","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","justifyContent","alignItems","Spinner","_headerGroup$headers","isSortable","i","Checkbox","isChecked","includes","onChange","event","handleCheckboxChange","target","checked","filter","selectedValue","ModalFooter","async","result","putApi","status","console","log","disabled","AddIcon","sx","marginLeft","textTransform","Input","React","_ref","ref","type","displayName","StorageCard","storageData","setStorageData","usedStorage","totalStorage","isLoading","setIsLoading","getApi","percentageUsed","extra","BsCloudCheck","toFixed","View","_JSON$parse","_JSON$parse2","_JSON$parse3","RoleColumn","accessor","display","dispatch","useDispatch","userData","useSelector","isLogoutScheduled","setIsLogoutScheduled","param","useParams","navigate","useNavigate","handleOpenModal","setEdit","setUser","setData","roleData","setRoleData","edit","deleteModel","setDelete","action","setAction","userAction","setUserAction","setIsOpen","handleOpen","response","logOut","message","clear","sessionStorage","toast","error","success","token","decodedToken","jwtDecode","currentTime","Date","now","exp","timeToExpire","setTimeout","_Fragment","AddEditUser","handleClose","selectedId","CommonDeleteModel","handleDeleteData","deleteApi","pre","ids","Grid","templateColumns","gap","GridItem","base","Heading","firstName","lastName","Menu","MenuButton","va","mr","as","rightIcon","ChevronDownIcon","MenuDivider","MenuList","minWidth","MenuItem","icon","EditIcon","DeleteIcon","Link","to","IoIosArrowBack","HSeparator","mt","phoneNumber","username","roles","RoleModal","_id","colStart","background","backgroundImage","src","alt","IoLogOutOutline","Storage","MdFileUpload","href","FormLabel","placeholder","defaultValue","show","setShow","initialValues","password","passwordExpirationPeriod","window","formik","useFormik","validationSchema","userSchema","enableReinitialize","onSubmit","values","AddData","errors","touched","handleBlur","handleChange","handleSubmit","resetForm","postApi","_response$response$da","updatedUserData","setItem","stringify","_response$response$da2","isCentered","IconButton","CloseIcon","ms","onBlur","name","InputGroup","InputLeftElement","pointerEvents","PhoneIcon","borderRadius","Select","isRequired","InputRightElement","Icon","_hover","cursor","RiEyeCloseLine","MdOutlineRemoveRedEye","showPass"],"sourceRoot":""}