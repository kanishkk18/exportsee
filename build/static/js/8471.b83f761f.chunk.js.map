{"version":3,"file":"static/js/8471.b83f761f.chunk.js","mappings":"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","sources":["views/admin/emailHistory/components/EmailAdvanceSearch.js","views/admin/emailHistory/add.js","views/admin/emailHistory/index.js","components/commonTableModel/Contact.js","components/commonTableModel/ContactModel.js","../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","components/commonTableModel/LeadModel.js"],"sourcesContent":["import React from 'react';\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\n\r\nconst EmailAdvanceSearch = (props) => {\r\n    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const initialValues = {\r\n        senderName: '',\r\n        realetedTo: '',\r\n        createByName: '',\r\n    }\r\n    const validationSchema = yup.object({\r\n        senderName: yup.string(),\r\n        realetedTo: yup.string(),\r\n        createByName: yup.string()\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            dispatch(setSearchValue(values))\r\n            dispatch(getSearchData({ values: values, allData: allData, type: 'Email' }))\r\n            // const searchResult = allData?.filter(\r\n            //     (item) =>\r\n            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&\r\n            //         (!values?.realetedTo || (values.realetedTo === \"contact\" ? item.createBy : item.createByLead)) &&\r\n            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))\r\n            // )\r\n            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);\r\n            const getValue = [\r\n                {\r\n                    name: [\"senderName\"],\r\n                    value: values.senderName\r\n                },\r\n                {\r\n                    name: [\"realetedTo\"],\r\n                    value: values.realetedTo\r\n                },\r\n                {\r\n                    name: [\"createByName\"],\r\n                    value: values.createByName\r\n                },\r\n            ]\r\n            dispatch(setGetTagValues(getValue.filter(item => item.value)))\r\n            setDisplaySearchData(true)\r\n            setAdvanceSearch(false)\r\n            resetForm();\r\n            setSearchbox('');\r\n        }\r\n    })\r\n\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;\r\n\r\n    return (\r\n        <>\r\n            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Advance Search</ModalHeader>\r\n                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />\r\n                    <ModalBody>\r\n                        <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={2}>\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2}>\r\n                                    Sender Name\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values?.senderName}\r\n                                    name=\"senderName\"\r\n                                    placeholder='Enter Sender Name'\r\n                                    fontWeight='500'\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.senderName && touched.senderName && errors.senderName}</Text>\r\n\r\n                            </GridItem>\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2}>\r\n                                    Realeted To\r\n                                </FormLabel>\r\n                                <Select\r\n                                    value={values?.realetedTo}\r\n                                    fontSize='sm'\r\n                                    name=\"realetedTo\"\r\n                                    onChange={handleChange}\r\n                                    fontWeight='500'\r\n                                    placeholder={'Select Realeted To'}\r\n                                >\r\n                                    <option value='contact'>Contact</option>\r\n                                    <option value='lead'>Lead</option>\r\n                                </Select>\r\n                                <Text mb='10px' color={'red'}> {errors.realetedTo && touched.realetedTo && errors.realetedTo}</Text>\r\n\r\n                            </GridItem>\r\n\r\n                            <GridItem colSpan={{ base: 12 }}>\r\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={\"#000\"} mb=\"0\" mt={2} >\r\n                                    CreateBy Name\r\n                                </FormLabel>\r\n                                <Input\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values?.createByName}\r\n                                    name=\"createByName\"\r\n                                    placeholder='Enter CreateBy Name'\r\n                                    fontWeight='500'\r\n                                />\r\n                                <Text mb='10px' color={'red'}> {errors.createByName && touched.createByName && errors.createByName}</Text>\r\n                            </GridItem>\r\n                        </Grid>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button size=\"sm\" variant=\"brand\" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>\r\n                        <Button size=\"sm\" variant=\"outline\" colorScheme=\"red\" onClick={() => resetForm()}>Clear</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmailAdvanceSearch\r\n","import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport ContactModel from \"components/commonTableModel/ContactModel\";\r\nimport LeadModel from \"components/commonTableModel/LeadModel\";\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { LiaMousePointerSolid } from 'react-icons/lia';\r\nimport { emailSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\nimport dayjs from 'dayjs';\r\nimport { fetchEmailTempData } from '../../../redux/slices/emailTempSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst AddEmailHistory = (props) => {\r\n    const { onClose, isOpen } = props\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [assignToLeadData, setAssignToLeadData] = useState([]);\r\n    const [assignToContactData, setAssignToContactData] = useState([]);\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n    const todayTime = new Date().toISOString().split('.')[0];\r\n\r\n    const initialValues = {\r\n        sender: user?._id,\r\n        recipient: '',\r\n        subject: '',\r\n        callNotes: '',\r\n        createByContact: '',\r\n        createByLead: '',\r\n        startDate: '',\r\n        type: 'message',\r\n        html: '',\r\n        category: 'contact',\r\n        // assignTo: '',\r\n        // assignToLead: '',\r\n        createBy: user?._id,\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: emailSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/email/add', values)\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                props.setAction((pre) => !pre)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n    useEffect(async () => {\r\n        values.start = props?.date\r\n        try {\r\n            let result\r\n            if (values.category === \"Contact\" && assignToContactData.length <= 0) {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\r\n                setAssignToContactData(result?.data)\r\n\r\n            } else if (values.category === \"Lead\" && assignToLeadData <= 0) {\r\n                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\r\n                setAssignToLeadData(result?.data)\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [props, values.category])\r\n\r\n    const fetchRecipientData = async () => {\r\n        if (values.createByContact) {\r\n            let findEmail = assignToContactData.find((item) => item._id === values.createByContact);\r\n            if (findEmail) {\r\n                setFieldValue('recipient', findEmail.email);\r\n            }\r\n        } else if (values.createByLead) {\r\n            let findEmail = assignToLeadData.find((item) => item._id === values.createByLead);\r\n            if (findEmail) {\r\n                setFieldValue('recipient', findEmail.leadEmail);\r\n            }\r\n        } else {\r\n            setFieldValue('recipient', \"\");\r\n\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        const result = await dispatch(fetchEmailTempData())\r\n        if (result.payload.status === 200) {\r\n            setData(result?.payload?.data);\r\n        } else {\r\n            toast.error(\"Failed to fetch data\", \"error\");\r\n        }\r\n        setIsLoding(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (values?.type === \"template\") fetchData()\r\n    }, [values?.type])\r\n\r\n    useEffect(() => {\r\n        fetchRecipientData()\r\n    }, [values.createByContact, values.createByLead])\r\n\r\n    return (\r\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent height={\"580px\"}>\r\n                <ModalHeader>Add Email </ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody overflowY={\"auto\"} height={\"400px\"}>\r\n                    {/* Contact Model  */}\r\n                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} fieldName='createByContact' setFieldValue={setFieldValue} />\r\n                    {/* Lead Model  */}\r\n                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} fieldName='createByLead' setFieldValue={setFieldValue} />\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Related\r\n                            </FormLabel>\r\n                            <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('createByContact', ''); setFieldValue('createByLead', ''); }} value={values.category}>\r\n                                <Stack direction='row'>\r\n                                    <Radio value='Contact'>Contact</Radio>\r\n                                    <Radio value='Lead'>Lead</Radio>\r\n                                </Stack>\r\n                            </RadioGroup>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            {values.category === \"Contact\" ?\r\n                                <>\r\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                            Recipient  (Contact)\r\n                                        </FormLabel>\r\n                                        <Flex justifyContent={'space-between'}>\r\n                                            <Select\r\n                                                value={values.createByContact}\r\n                                                name=\"createByContact\"\r\n                                                onChange={handleChange}\r\n                                                mb={errors.createByContact && touched.createByContact ? undefined : '10px'}\r\n                                                fontWeight='500'\r\n                                                placeholder={'Assign To'}\r\n                                                borderColor={errors.createByContact && touched.createByContact ? \"red.300\" : null}\r\n                                            >\r\n                                                {assignToContactData?.map((item) => {\r\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>\r\n                                                })}\r\n                                            </Select>\r\n                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                        </Flex>\r\n                                    </GridItem>\r\n                                </>\r\n                                : values.category === \"Lead\" ?\r\n                                    <>\r\n                                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                                Recipient (Lead)\r\n                                            </FormLabel>\r\n                                            <Flex justifyContent={'space-between'}>\r\n                                                <Select\r\n                                                    value={values.createByLead}\r\n                                                    name=\"createByLead\"\r\n                                                    onChange={handleChange}\r\n                                                    mb={errors.createByLead && touched.createByLead ? undefined : '10px'}\r\n                                                    fontWeight='500'\r\n                                                    placeholder={'Assign To'}\r\n                                                    borderColor={errors.createByLead && touched.createByLead ? \"red.300\" : null}\r\n                                                >\r\n                                                    {assignToLeadData?.map((item) => {\r\n                                                        return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>\r\n                                                    })}\r\n                                                </Select>\r\n                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\r\n                                            </Flex>\r\n                                        </GridItem>\r\n                                    </>\r\n                                    : ''\r\n                            }\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Recipient<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                disabled\r\n                                value={values.recipient}\r\n                                name=\"recipient\"\r\n                                placeholder='Recipient'\r\n                                fontWeight='500'\r\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Start Date<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\r\n                                value={values.startDate}\r\n                                name=\"startDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Subject<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.subject}\r\n                                name=\"subject\"\r\n                                placeholder='subject'\r\n                                fontWeight='500'\r\n                                borderColor={errors.subject && touched.subject ? \"red.300\" : null}\r\n                            />\r\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Message\r\n                            </FormLabel>\r\n                            <RadioGroup onChange={(e) => { setFieldValue('type', e) }} value={values.type}>\r\n                                <Stack direction='row'>\r\n                                    <Radio value='message'>Message</Radio>\r\n                                    <Radio value='template'>Template</Radio>\r\n                                </Stack>\r\n                            </RadioGroup>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            {\r\n                                values?.type === \"message\" ?\r\n                                    <>\r\n                                        <Textarea\r\n                                            resize={'none'}\r\n                                            fontSize='sm'\r\n                                            placeholder='Enter Message'\r\n                                            onChange={handleChange} onBlur={handleBlur}\r\n                                            value={values.message}\r\n                                            name=\"message\"\r\n                                            fontWeight='500'\r\n                                            borderColor={errors.message && touched.message ? \"red.300\" : null}\r\n                                        />\r\n                                        <Text fontSize='sm' mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>\r\n                                    </>\r\n                                    :\r\n                                    <Select\r\n                                        // value={values.assignTo}\r\n                                        name=\"html\"\r\n                                        onChange={handleChange} onBlur={handleBlur}\r\n                                        value={values.html}\r\n                                        fontWeight='500'\r\n                                        placeholder={'Select Template'}\r\n                                    // borderColor={errors.assignTo && touched.assignTo ? \"red.300\" : null}\r\n                                    >\r\n                                        {data?.map((item) => {\r\n                                            return <option value={item?.html} key={item._id}>{item?.templateName}</option>\r\n                                        })}\r\n                                    </Select>\r\n                            }\r\n                        </GridItem>\r\n                    </Grid>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size=\"sm\" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\r\n                    <Button sx={{\r\n                        marginLeft: 2,\r\n                        textTransform: \"capitalize\",\r\n                    }} variant=\"outline\"\r\n                        colorScheme=\"red\" onClick={() => {\r\n                            formik.resetForm()\r\n                            onClose()\r\n                        }} size=\"sm\">Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddEmailHistory\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\nimport { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';\r\nimport { getApi } from 'services/api';\r\nimport { HasAccess } from '../../../redux/accessUtils';\r\nimport CommonCheckTable from '../../../components/reactTable/checktable';\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\nimport { CiMenuKebab } from 'react-icons/ci';\r\nimport EmailAdvanceSearch from './components/EmailAdvanceSearch';\r\nimport moment from 'moment';\r\nimport { MdLeaderboard } from 'react-icons/md';\r\nimport { IoIosContact } from 'react-icons/io';\r\nimport AddEmailHistory from './add';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchEmailsData } from '../../../redux/slices/emailsSlice';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Index = (props) => {\r\n    const title = \"Email\";\r\n    const [action, setAction] = useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [selectedId, setDelete] = useState(false);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [advanceSearch, setAdvanceSearch] = useState(false);\r\n    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\r\n    const [searchboxOutside, setSearchboxOutside] = useState('');\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [displaySearchData, setDisplaySearchData] = useState(false);\r\n    const [searchedData, setSearchedData] = useState([]);\r\n    const [permission, leadAccess, contactAccess] = HasAccess([\"Emails\", 'Leads', 'Contacts']);\r\n    const actionHeader = {\r\n        Header: \"Action\", accessor: 'action', isSortable: false, center: true,\r\n        cell: ({ row }) => (\r\n            <Text fontSize=\"md\" fontWeight=\"900\" textAlign={\"center\"}>\r\n                <Menu isLazy  >\r\n                    <MenuButton><CiMenuKebab /></MenuButton>\r\n                    <MenuList minW={'fit-content'} transform={\"translate(1520px, 173px);\"}>\r\n                        {permission?.view && <MenuItem py={2.5} color={'green'} onClick={() => navigate(`/Email/${row?.values._id}`)} icon={<ViewIcon mb={'2px'} fontSize={15} />}>View</MenuItem>}\r\n                        {row?.original?.createByContact && contactAccess?.view ?\r\n                            <MenuItem width={\"165px\"} py={2.5} color={'black'} onClick={() => navigate(row?.original?.createByContact && `/contactView/${row?.original.createByContact}`)} icon={row?.original.createByContact && <IoIosContact fontSize={15} />}>  {(row?.original.createByContact && contactAccess?.view) && \"contact\"}\r\n                            </MenuItem>\r\n                            : ''}\r\n                        {row?.original.createByLead && leadAccess?.view ? <MenuItem width={\"165px\"} py={2.5} color={'black'} onClick={() => navigate(`/leadView/${row?.original.createByLead}`)} icon={row?.original.createByLead && leadAccess?.view && <MdLeaderboard style={{ marginBottom: '4px' }} fontSize={15} />}>{row?.original.createByLead && leadAccess?.view && 'lead'}</MenuItem> : ''}\r\n                    </MenuList>\r\n                </Menu>\r\n            </Text>\r\n        )\r\n    };\r\n    const tableColumns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n        {\r\n            Header: \"recipient\", accessor: \"createByName\", cell: (cell) => (\r\n                <Link to={`/Email/${cell?.row?.values._id}`}>\r\n                    <Text\r\n                        me=\"10px\"\r\n                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                        color='brand.600'\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                    >\r\n                        {cell?.value || '-'}\r\n                    </Text>\r\n                </Link>)\r\n        },\r\n        { Header: 'sender Name', accessor: 'senderName' },\r\n        {\r\n            Header: \"Realeted To\", accessor: 'realeted', cell: ({ row }) => (\r\n                <Text  >\r\n                    {row?.original.createByContact && contactAccess?.view ? <Link to={`/contactView/${row?.original.createByContact}`}>\r\n                        <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color={'brand.600'}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByContact && \"Contact\"}\r\n                        </Text>\r\n                    </Link> :\r\n                        <Text\r\n                            me=\"10px\"\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByContact && \"Contact\"}\r\n                        </Text>}\r\n\r\n                    {leadAccess?.view && row?.original.createByLead ? <Link to={`/leadView/${row?.original.createByLead}`}>\r\n                        <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color={'brand.600'}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                        >\r\n                            {row?.original.createByLead && \"Lead\"}\r\n                        </Text>\r\n                    </Link> : <Text\r\n                        me=\"10px\"\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"700\"\r\n                    >\r\n                        {row?.original.createByLead && \"Lead\"}\r\n                    </Text>}\r\n                </Text>\r\n            )\r\n        },\r\n        { Header: \"timestamp\", accessor: \"timestamp\", },\r\n        {\r\n            Header: \"Created\", accessor: 'created', cell: ({ row }) => (\r\n                <Text fontSize=\"sm\" fontWeight=\"700\">\r\n                    {moment(row?.values.timestamp).format('(DD/MM) h:mma')}\r\n                </Text>\r\n            )\r\n        },\r\n        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])\r\n\r\n    ];\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        const result = await dispatch(fetchEmailsData())\r\n        let response = [...result?.payload?.data]\r\n\r\n        response && response?.length > 0 && response?.forEach(element => {\r\n\r\n            if (Object.isExtensible(element)) {\r\n                if (element.createByLead) {\r\n                    element.realeted = 'Lead';\r\n                }\r\n                if (element.createBy) {\r\n                    element.realeted = 'Contact';\r\n                }\r\n            } else {\r\n                const modifiedElement = { ...element };\r\n                if (element.createByLead) {\r\n                    modifiedElement.realeted = 'Lead';\r\n                }\r\n                if (element.createBy) {\r\n                    modifiedElement.realeted = 'Contact';\r\n                }\r\n                element = modifiedElement;\r\n            }\r\n        });\r\n        if (result.payload.status === 200) {\r\n            setData(response);\r\n        } else {\r\n            toast.error(\"Failed to fetch data\", \"error\");\r\n        }\r\n        setIsLoding(false)\r\n    }\r\n\r\n    // const [columns, setColumns] = useState([...tableColumns]);\r\n    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);\r\n    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [action])\r\n\r\n    return (\r\n        <div>\r\n            <CommonCheckTable\r\n                title={title}\r\n                isLoding={isLoding}\r\n                columnData={tableColumns ?? []}\r\n                // dataColumn={dataColumn ?? []}\r\n                allData={data ?? []}\r\n                tableData={data}\r\n                searchDisplay={displaySearchData}\r\n                setSearchDisplay={setDisplaySearchData}\r\n                searchedDataOut={searchedData}\r\n                setSearchedDataOut={setSearchedData}\r\n                tableCustomFields={[]}\r\n                access={permission}\r\n                // action={action}\r\n                // setAction={setAction}\r\n                // selectedColumns={selectedColumns}\r\n                // setSelectedColumns={setSelectedColumns}\r\n                // isOpen={isOpen}\r\n                // onClose={onclose}\r\n                onOpen={onOpen}\r\n                selectedValues={selectedValues}\r\n                setSelectedValues={setSelectedValues}\r\n                setDelete={setDelete}\r\n                deleteMany={true}\r\n                AdvanceSearch={\r\n                    <Button variant=\"outline\" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: \"5px\", md: \"0\" }} size=\"sm\" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>\r\n                }\r\n                getTagValuesOutSide={getTagValuesOutSide}\r\n                searchboxOutside={searchboxOutside}\r\n                setGetTagValuesOutside={setGetTagValuesOutside}\r\n                setSearchboxOutside={setSearchboxOutside}\r\n                handleSearchType=\"EmailSearch\"\r\n            />\r\n\r\n            <EmailAdvanceSearch\r\n                advanceSearch={advanceSearch}\r\n                setAdvanceSearch={setAdvanceSearch}\r\n                setSearchedData={setSearchedData}\r\n                setDisplaySearchData={setDisplaySearchData}\r\n                allData={data ?? []}\r\n                setAction={setAction}\r\n                setGetTagValues={setGetTagValuesOutside}\r\n                setSearchbox={setSearchboxOutside}\r\n            />\r\n\r\n            <AddEmailHistory isOpen={isOpen} size={\"sm\"} onClose={onClose} setAction={setAction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\n\r\nexport default function ContactTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n+\r\n+        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead zIndex={1}>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      align=\"center\"\r\n                      justifyContent={column.center ? \"center\" : \"start\"}\r\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\r\n                      color=\" secondaryGray.900\"\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\r\n                        {column.render(\"Header\")}\r\n                      </span>\r\n\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n +\r\n +             <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  img\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"title\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"first Name\") {\r\n                      data = (\r\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\r\n                        <Text\r\n                          me=\"10px\"\r\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                        // </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"last Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"phone Number\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Email Address\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"physical Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"mailing Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Contact Method\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ContactTable from './Contact.js'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable.js';\r\nimport { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';\r\nimport { fetchContactData } from '../../redux/slices/contactSlice.js';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const [selectedValues, setSelectedValues] = useState();\r\n    const [contactData, setContactData] = useState([]);\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [columns, setColumns] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n        const result = await dispatch(fetchContactCustomFiled());\r\n        setContactData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            ...(result?.payload?.data?.[0]?.fields || [])\r\n                .filter(field => field?.isTableField === true)\r\n                .map(field => ({ Header: field?.label, accessor: field?.name }))\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    };\r\n    useEffect(async () => {\r\n        await dispatch(fetchContactData())\r\n        fetchCustomDataFields();\r\n    }, []);\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Contact</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex>\r\n                        :\r\n                        <CommonCheckTable\r\n                            title={'Contacts'}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n","import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Spinner from 'components/spinner/Spinner'\r\nimport { GiClick } from \"react-icons/gi\";\r\nimport CommonCheckTable from 'components/reactTable/checktable';\r\nimport { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchLeadData } from '../../redux/slices/leadSlice';\r\n\r\nconst ContactModel = (props) => {\r\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\r\n    const title = \"Leads\";\r\n    const dispatch = useDispatch();\r\n\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [columns, setColumns] = useState([]);\r\n    const [leadData, setLeadData] = useState([]);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            setFieldValue(fieldName, selectedValues)\r\n            onClose()\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    }\r\n\r\n    const fetchCustomDataFields = async () => {\r\n        setIsLoding(true);\r\n\r\n        const result = await dispatch(fetchLeadCustomFiled());\r\n        setLeadData(result?.payload?.data);\r\n\r\n        const tempTableColumns = [\r\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\r\n            {\r\n                Header: \"Status\", accessor: \"leadStatus\", isSortable: true, center: true,\r\n                cell: ({ row }) => (\r\n                    row.original.leadStatus\r\n                )\r\n            },\r\n            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== \"leadStatus\" && { Header: field?.label, accessor: field?.name })) || []),\r\n        ];\r\n\r\n        setColumns(tempTableColumns);\r\n        setIsLoding(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchLeadData())\r\n        fetchCustomDataFields();\r\n    }, [])\r\n\r\n    return (\r\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Select Lead</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {isLoding ?\r\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                            <Spinner />\r\n                        </Flex> :\r\n                        <CommonCheckTable\r\n                            title={title}\r\n                            isLoding={isLoding}\r\n                            columnData={columns ?? []}\r\n                            // dataColumn={columns ?? []}\r\n                            allData={data ?? []}\r\n                            tableData={data}\r\n                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\r\n                            AdvanceSearch={() => \"\"}\r\n                            ManageGrid={false}\r\n                            deleteMany={false}\r\n                            selectedValues={selectedValues}\r\n                            setSelectedValues={setSelectedValues}\r\n                            selectType=\"single\"\r\n                            customSearch={false}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>\r\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactModel\r\n"],"names":["props","state","allData","advanceSearch","setAdvanceSearch","isLoding","setSearchedData","setDisplaySearchData","setSearchClear","setSearchbox","dispatch","useDispatch","validationSchema","yup","senderName","realetedTo","createByName","formik","useFormik","initialValues","onSubmit","values","_ref","resetForm","setSearchValue","getSearchData","type","getValue","name","value","setGetTagValues","filter","item","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","dirty","_jsx","_Fragment","children","_jsxs","Modal","onClose","isOpen","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","onClick","ModalBody","Grid","templateColumns","mb","gap","GridItem","colSpan","base","FormLabel","display","ms","fontSize","fontWeight","color","mt","Input","onChange","onBlur","placeholder","Text","Select","ModalFooter","Button","size","variant","mr","disabled","Spinner","colorScheme","setIsLoding","useState","assignToLeadData","setAssignToLeadData","assignToContactData","setAssignToContactData","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","data","setData","user","JSON","parse","localStorage","getItem","todayTime","Date","toISOString","split","sender","_id","recipient","subject","callNotes","createByContact","createByLead","startDate","html","category","createBy","emailSchema","AddData","async","postApi","status","setAction","pre","e","console","log","useEffect","start","date","result","_result","length","getApi","role","_result2","fetchEmailTempData","_result$payload","payload","toast","error","fetchData","findEmail","find","email","leadEmail","fetchRecipientData","height","overflowY","ContactModel","fieldName","LeadModel","md","RadioGroup","Stack","direction","Radio","Flex","justifyContent","undefined","borderColor","map","firstName","lastName","leadName","IconButton","ml","icon","LiaMousePointerSolid","min","dayjs","format","Textarea","resize","message","templateName","sx","marginLeft","textTransform","action","onOpen","useDisclosure","selectedId","setDelete","selectedValues","setSelectedValues","getTagValuesOutSide","setGetTagValuesOutside","searchboxOutside","setSearchboxOutside","navigate","useNavigate","displaySearchData","searchedData","permission","leadAccess","contactAccess","HasAccess","actionHeader","Header","accessor","isSortable","center","cell","_row$original","row","textAlign","Menu","isLazy","MenuButton","CiMenuKebab","MenuList","minW","transform","view","MenuItem","py","ViewIcon","original","width","_row$original2","IoIosContact","MdLeaderboard","style","marginBottom","tableColumns","_cell$row","Link","to","me","textDecoration","_ref2","_ref3","moment","timestamp","update","delete","fetchEmailsData","response","forEach","element","Object","isExtensible","realeted","modifiedElement","CommonCheckTable","title","columnData","tableData","searchDisplay","setSearchDisplay","searchedDataOut","setSearchedDataOut","tableCustomFields","access","deleteMany","AdvanceSearch","leftIcon","SearchIcon","sm","handleSearchType","EmailAdvanceSearch","AddEmailHistory","ContactTable","columnsData","columns","useMemo","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageSize","textColor","useColorModeValue","handleCheckboxChange","event","target","checked","prevSelectedValues","selectedValue","Card","w","px","border","overflowX","lg","justify","align","lineHeight","CountUpComponent","targetNumber","Box","className","Table","Thead","zIndex","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","getSortByToggleProps","pe","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","_row$cells","getRowProps","cells","Checkbox","isChecked","includes","getCellProps","Pagination","_contactData$","_contactData$$fields","contactData","setContactData","setColumns","fetchContactData","_result$payload2","_result$payload2$data","_result$payload2$data2","fetchContactCustomFiled","tempTableColumns","fields","field","isTableField","label","fetchCustomDataFields","alignItems","ManageGrid","selectType","customSearch","GiClick","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_excluded","forwardRef","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","rows","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","textarea","cx","__css","__DEV__","displayName","_leadData$","_leadData$$fields","leadData","setLeadData","fetchLeadData","_result$payload2$data3","_result$payload2$data4","fetchLeadCustomFiled","leadStatus"],"sourceRoot":""}